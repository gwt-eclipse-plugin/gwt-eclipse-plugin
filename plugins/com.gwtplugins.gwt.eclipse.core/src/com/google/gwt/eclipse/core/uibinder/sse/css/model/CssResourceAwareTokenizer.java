/*******************************************************************************
 * Copyright 2011 Google Inc. All Rights Reserved.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
// CHECKSTYLE_OFF
/*
 * The original CSSTokenizer.flex is at
 * http://dev.eclipse.org/viewsvn/index.cgi/sourceediting/plugins/org.eclipse.wst.sse.core/DevTimeSupport/SedModel/CSSTokenizer/?root=WebTools_Project.
 * 
 * This contains modifications to allow scanning CSS Resource custom at-rules, which
 * the built-in Eclipse flex file fails at.
 * 
 * To generate the java source code, download JFlex and run it with the default options.
 * The generated java file has some comments before the "// CHECKSTYLE_OFF", make sure
 * you delete them.  Also, fix the local path in the class javadoc.
 */
/*nlsXXX*/
package com.google.gwt.eclipse.core.uibinder.sse.css.model;

import org.eclipse.wst.css.core.internal.parser.CSSRegionUtil;
import org.eclipse.wst.css.core.internal.parser.ICSSTokenizer;
import org.eclipse.wst.css.core.internal.parser.regions.CSSTextRegionFactory;
import org.eclipse.wst.css.core.internal.parserz.CSSRegionContexts;
import org.eclipse.wst.css.core.internal.parserz.CSSTextToken;
import org.eclipse.wst.sse.core.internal.provisional.text.ITextRegion;

import java.io.CharArrayReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/22/10 3:45 PM from the specification file
 * <tt>plugins/com.google.gwt.eclipse.core/src/com/google/gwt/eclipse/core/uibinder/sse/css/model/CssResourceAwareTokenizer.flex</tt>
 */
@SuppressWarnings("restriction")
// "restriction" applies to imported classes in subpackages of org.eclipse.wst.css.core.internal.
public class CssResourceAwareTokenizer implements CSSRegionContexts, ICSSTokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_SELECTOR_ATTRIBUTE_NAME = 26;
  public static final int ST_IMPORT_DELIMITER = 10;
  public static final int ST_DECLARATION_PRE_VALUE = 38;
  public static final int ST_SELECTOR = 22;
  public static final int ST_CHARSET_DELIMITER = 4;
  public static final int ST_DECLARATION_VALUE = 40;
  public static final int ST_PAGE_PSEUDO_PAGE = 16;
  public static final int ST_IMPORT_URI = 6;
  public static final int ST_SELECTOR_ATTRIBUTE_END = 32;
  public static final int ST_CSSRESOURCE_RULE_MEDIUM = 42;
  public static final int ST_SELECTOR_ATTRIBUTE_OPERATOR = 28;
  public static final int ST_DECLARATION = 34;
  public static final int ST_PAGE_DELIMITER = 18;
  public static final int ST_SELECTOR_ATTRIBUTE_VALUE = 30;
  public static final int ST_MEDIA_MEDIUM = 12;
  public static final int ST_CHARSET_NAME = 2;
  public static final int ST_IMPORT_MEDIUM = 8;
  public static final int ST_DECLARATION_SEPARATOR = 36;
  public static final int ST_FONT_FACE_DELIMITER = 20;
  public static final int ST_MEDIA_DELIMITER = 14;
  public static final int ST_SELECTOR_MODIFIER = 24;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9,  9,  9,  0,  0, 10, 10, 11, 11, 12, 12, 13, 13, 
    14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\17\1\0\1\4\1\20\22\0\1\6\1\31\1\11"+
    "\1\21\1\16\1\74\1\16\1\5\1\25\1\13\1\35\1\15\1\65"+
    "\1\10\1\14\1\34\12\1\1\67\1\45\1\30\1\71\1\32\1\27"+
    "\1\36\1\50\1\26\1\62\1\40\1\42\1\44\1\66\1\63\1\54"+
    "\2\2\1\24\1\64\1\53\1\56\1\57\1\2\1\23\1\55\1\52"+
    "\1\22\1\46\1\2\1\51\2\2\1\70\1\3\1\73\1\16\1\2"+
    "\1\16\1\47\1\7\1\61\1\37\1\41\1\43\1\66\1\63\1\54"+
    "\2\2\1\24\1\64\1\53\1\56\1\57\1\2\1\23\1\55\1\52"+
    "\1\22\1\46\1\2\1\51\2\2\1\60\1\72\1\33\1\72\1\0"+
    "\uff80\2";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\23\0\1\1\1\2\1\3\1\2\1\4\4\2\1\5"+
    "\1\2\1\6\1\2\1\7\1\10\3\2\1\11\3\2"+
    "\1\12\2\2\1\13\1\14\2\2\1\15\1\16\1\17"+
    "\2\2\1\20\1\2\1\4\1\21\1\22\1\23\2\2"+
    "\1\24\1\2\1\25\1\26\4\2\1\27\2\2\1\30"+
    "\1\31\1\32\1\33\4\2\1\34\3\2\1\33\1\2"+
    "\2\35\1\4\3\1\1\5\2\1\1\0\1\3\1\0"+
    "\1\36\1\0\1\37\15\0\1\7\4\0\1\40\4\0"+
    "\1\41\4\0\1\12\1\0\1\14\1\0\1\17\1\0"+
    "\1\42\1\0\1\23\1\0\1\26\2\0\1\26\3\0"+
    "\1\27\1\43\3\0\1\44\1\0\1\33\1\45\1\33"+
    "\2\0\1\46\2\0\1\32\1\47\2\0\1\33\2\0"+
    "\1\50\10\1\1\3\1\51\1\36\1\37\11\0\1\52"+
    "\6\0\1\7\1\0\1\40\2\0\1\40\2\0\1\41"+
    "\2\0\1\41\2\0\1\12\1\14\1\17\1\23\1\26"+
    "\1\0\1\26\2\0\1\26\1\0\1\27\1\43\1\33"+
    "\1\0\1\33\1\0\1\46\2\0\1\46\1\0\1\47"+
    "\1\53\1\33\1\0\1\51\10\1\1\52\1\3\1\36"+
    "\1\37\1\54\1\55\16\0\1\7\5\0\1\12\1\14"+
    "\1\17\1\23\1\26\2\0\1\27\1\43\2\33\2\0"+
    "\1\47\1\53\1\0\1\45\1\0\1\54\1\55\4\1"+
    "\1\3\1\36\1\37\1\56\5\0\1\57\3\0\1\7"+
    "\1\0\1\7\10\0\1\60\1\12\1\14\1\17\1\23"+
    "\1\26\2\0\1\27\1\43\2\33\2\0\1\47\2\53"+
    "\5\0\1\61\1\0\1\56\2\1\1\3\1\36\1\37"+
    "\6\0\1\62\1\0\1\7\6\0\1\60\2\0\1\12"+
    "\1\14\1\17\1\23\1\26\2\0\1\27\1\43\2\33"+
    "\2\0\1\47\2\53\2\0\1\61\3\0\2\1\1\3"+
    "\1\36\1\37\1\0\1\63\1\3\2\0\1\7\13\0"+
    "\1\12\1\14\1\17\1\23\1\26\2\0\1\27\1\43"+
    "\2\33\2\0\1\47\2\53\10\0\1\36\1\37\1\0"+
    "\1\64\1\0\1\7\6\0\1\60\1\0\1\60\2\0"+
    "\1\43\1\33\2\0\1\47\2\53\2\0\1\61\1\0"+
    "\1\61\6\0\1\33\1\53\4\0\1\65\4\0\1\53"+
    "\3\0\1\66\12\0";

  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b"+
    "\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u04c4\0\u06ac\0\u04c4\0\u06e9"+
    "\0\u0726\0\u04c4\0\u0763\0\u07a0\0\u07dd\0\u04c4\0\u081a\0\u0857"+
    "\0\u0894\0\u08d1\0\u090e\0\u094b\0\u04c4\0\u0988\0\u09c5\0\u0a02"+
    "\0\u04c4\0\u04c4\0\u0a3f\0\u0a7c\0\u0ab9\0\u04c4\0\u0af6\0\u0b33"+
    "\0\u04c4\0\u04c4\0\u0b70\0\u0bad\0\u0bea\0\u04c4\0\u0c27\0\u04c4"+
    "\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f"+
    "\0\u04c4\0\u04c4\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d"+
    "\0\u04c4\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u06ac\0\u04c4"+
    "\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u1128\0\u11df\0\u121c\0\u053e"+
    "\0\u1259\0\u1296\0\u05f5\0\u12d3\0\u0632\0\u1310\0\u134d\0\u138a"+
    "\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572"+
    "\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u0763\0\u16e0\0\u04c4"+
    "\0\u07dd\0\u171d\0\u081a\0\u175a\0\u04c4\0\u0857\0\u1797\0\u17d4"+
    "\0\u090e\0\u1811\0\u09c5\0\u184e\0\u0a7c\0\u188b\0\u18c8\0\u04c4"+
    "\0\u0bad\0\u1905\0\u0ca1\0\u1942\0\u0cde\0\u197f\0\u04c4\0\u0d58"+
    "\0\u19bc\0\u0dd2\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u0fba\0\u04c4"+
    "\0\u0ec6\0\u1aed\0\u04c4\0\u1b2a\0\u0f03\0\u1b67\0\u04c4\0\u0f7d"+
    "\0\u1ba4\0\u1be1\0\u1034\0\u1c1e\0\u1c5b\0\u1c98\0\u10ae\0\u1cd5"+
    "\0\u04c4\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80"+
    "\0\u1ebd\0\u1efa\0\u04c4\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b"+
    "\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199\0\u04c4\0\u21d6"+
    "\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381\0\u0763"+
    "\0\u23be\0\u23fb\0\u07dd\0\u2438\0\u2475\0\u081a\0\u24b2\0\u24ef"+
    "\0\u0857\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a"+
    "\0\u26d7\0\u0cde\0\u2714\0\u2751\0\u0d58\0\u278e\0\u27cb\0\u2808"+
    "\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u0f03\0\u2939\0\u2976\0\u0f7d"+
    "\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\u1128\0\u2ae4\0\u2b21"+
    "\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u1128\0\u2ccc"+
    "\0\u2d09\0\u2d46\0\u04c4\0\u04c4\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a"+
    "\0\u2e77\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022"+
    "\0\u305f\0\u309c\0\u30d9\0\u3116\0\u3153\0\u3190\0\u31cd\0\u320a"+
    "\0\u3247\0\u3284\0\u32c1\0\u32fe\0\u333b\0\u3378\0\u33b5\0\u33f2"+
    "\0\u342f\0\u346c\0\u34a9\0\u34e6\0\u3523\0\u3560\0\u359d\0\u35da"+
    "\0\u3617\0\u3654\0\u1128\0\u1128\0\u3691\0\u36ce\0\u370b\0\u3748"+
    "\0\u3785\0\u37c2\0\u37ff\0\u04c4\0\u383c\0\u3879\0\u38b6\0\u38f3"+
    "\0\u3930\0\u04c4\0\u396d\0\u39aa\0\u39e7\0\u04c4\0\u3a24\0\u3a61"+
    "\0\u3a9e\0\u3adb\0\u3b18\0\u3b55\0\u3b92\0\u3bcf\0\u3c0c\0\u3c49"+
    "\0\u04c4\0\u3c86\0\u3cc3\0\u3d00\0\u3d3d\0\u3d7a\0\u3db7\0\u3df4"+
    "\0\u3e31\0\u3e6e\0\u3eab\0\u3ee8\0\u3f25\0\u3f62\0\u3f9f\0\u3fdc"+
    "\0\u4019\0\u4056\0\u4093\0\u3617\0\u40d0\0\u410d\0\u04c4\0\u414a"+
    "\0\u1128\0\u4187\0\u41c4\0\u4201\0\u423e\0\u427b\0\u42b8\0\u42f5"+
    "\0\u4332\0\u436f\0\u43ac\0\u43e9\0\u04c4\0\u4426\0\u4463\0\u44a0"+
    "\0\u44dd\0\u451a\0\u4557\0\u4594\0\u45d1\0\u3b92\0\u460e\0\u464b"+
    "\0\u4688\0\u46c5\0\u4702\0\u473f\0\u477c\0\u47b9\0\u47f6\0\u4833"+
    "\0\u4870\0\u48ad\0\u48ea\0\u4927\0\u4964\0\u49a1\0\u49de\0\u4a1b"+
    "\0\u4a58\0\u4a95\0\u4056\0\u4ad2\0\u4b0f\0\u4b4c\0\u4b89\0\u4bc6"+
    "\0\u4c03\0\u4c40\0\u4c7d\0\u4cba\0\u04c4\0\u04c4\0\u4cf7\0\u4d34"+
    "\0\u4d71\0\u4dae\0\u4deb\0\u4e28\0\u4e65\0\u4ea2\0\u4edf\0\u4f1c"+
    "\0\u4f59\0\u4f96\0\u4fd3\0\u5010\0\u504d\0\u508a\0\u50c7\0\u5104"+
    "\0\u5141\0\u517e\0\u51bb\0\u51f8\0\u5235\0\u5272\0\u52af\0\u52ec"+
    "\0\u5329\0\u5366\0\u53a3\0\u53e0\0\u541d\0\u545a\0\u5497\0\u54d4"+
    "\0\u5511\0\u554e\0\u558b\0\u55c8\0\u5605\0\u5642\0\u567f\0\u04c4"+
    "\0\u56bc\0\u56f9\0\u5736\0\u5773\0\u57b0\0\u57ed\0\u582a\0\u5867"+
    "\0\u3c0c\0\u58a4\0\u3c49\0\u58e1\0\u591e\0\u595b\0\u5998\0\u59d5"+
    "\0\u5a12\0\u5a4f\0\u5a8c\0\u5ac9\0\u5b06\0\u5b43\0\u40d0\0\u5b80"+
    "\0\u410d\0\u5bbd\0\u5bfa\0\u5c37\0\u5c74\0\u5cb1\0\u5cee\0\u5d2b"+
    "\0\u5d68\0\u5da5\0\u5de2\0\u5e1f\0\u5e5c\0\u04c4\0\u5e99\0\u5ed6"+
    "\0\u5f13\0\u5f50\0\u04c4\0\u5f8d\0\u5fca\0\u6007\0\u04c4\0\u6044"+
    "\0\u6081\0\u60be\0\u60fb\0\u6138\0\u6175\0\u61b2\0\u61ef\0\u622c"+
    "\0\u6269";


  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\25\1\26\1\27\1\30\1\25\1\30\1\26\1\31"+
    "\1\25\1\30\1\25\1\32\2\25\2\30\1\33\3\26"+
    "\1\25\1\26\1\25\1\34\2\25\1\35\1\36\1\37"+
    "\1\40\6\26\1\25\12\26\1\25\4\26\1\25\1\26"+
    "\1\41\1\42\10\25\1\30\1\43\1\30\1\25\1\44"+
    "\1\45\1\30\4\25\2\30\7\25\1\34\2\25\1\35"+
    "\1\36\1\25\1\40\42\25\1\30\1\25\1\30\1\25"+
    "\1\44\1\25\1\30\4\25\2\30\7\25\1\34\2\25"+
    "\1\35\1\36\1\25\1\40\6\25\1\46\33\25\1\30"+
    "\1\47\1\30\1\25\1\44\1\50\1\30\4\25\2\30"+
    "\1\25\1\51\5\25\1\34\2\25\1\35\1\36\1\25"+
    "\1\40\6\25\1\46\31\25\1\52\1\53\1\30\1\25"+
    "\1\30\1\52\1\54\1\25\1\30\4\25\2\30\1\25"+
    "\3\52\1\25\1\52\1\25\1\34\2\25\1\35\1\36"+
    "\1\25\1\40\6\52\1\46\12\52\1\25\4\52\1\25"+
    "\1\52\12\25\1\30\1\25\1\30\1\25\1\44\1\25"+
    "\1\30\4\25\2\30\7\25\1\34\2\25\1\35\1\36"+
    "\1\25\1\40\6\25\1\46\17\25\1\55\11\25\1\56"+
    "\1\57\1\30\1\25\1\30\1\56\1\60\1\25\1\30"+
    "\4\25\2\30\1\25\3\56\1\25\1\56\1\25\1\34"+
    "\2\25\1\35\1\36\1\25\1\40\6\56\1\25\12\56"+
    "\1\61\4\56\1\25\1\56\12\25\1\30\1\25\1\30"+
    "\1\25\1\44\1\25\1\30\4\25\2\30\7\25\1\34"+
    "\2\25\1\35\1\36\1\25\1\40\21\25\1\61\4\25"+
    "\1\62\11\25\1\63\1\64\1\30\1\25\1\30\1\63"+
    "\1\65\1\25\1\30\4\25\2\30\1\25\3\63\1\25"+
    "\1\63\1\25\1\34\2\25\1\35\1\36\1\25\1\40"+
    "\6\63\1\25\12\63\1\66\4\63\1\25\1\63\1\67"+
    "\11\25\1\30\1\25\1\30\1\25\1\44\1\25\1\30"+
    "\4\25\2\30\7\25\1\34\2\25\1\35\1\36\1\25"+
    "\1\40\21\25\1\66\20\25\1\70\1\25\1\70\1\25"+
    "\1\44\1\25\1\70\1\25\1\32\1\71\1\25\2\70"+
    "\1\33\6\25\1\34\1\25\1\71\1\35\1\36\1\37"+
    "\1\40\21\25\1\66\4\25\1\72\1\25\1\41\1\42"+
    "\6\25\1\73\1\74\1\30\1\25\1\30\1\73\1\75"+
    "\1\25\1\30\4\25\2\30\1\25\3\73\1\25\1\73"+
    "\1\25\1\34\2\25\1\35\1\36\1\25\1\40\6\73"+
    "\1\25\12\73\1\25\4\73\1\25\1\73\12\25\1\30"+
    "\1\25\1\30\1\25\1\44\1\25\1\30\4\25\2\30"+
    "\7\25\1\34\2\25\1\35\1\36\1\25\1\40\32\25"+
    "\1\76\1\77\1\100\3\25\1\101\1\102\1\30\1\103"+
    "\1\30\1\101\1\104\1\105\1\30\4\25\2\30\1\25"+
    "\3\101\1\25\1\101\1\25\1\34\2\25\1\35\1\36"+
    "\1\25\1\40\6\101\1\25\12\101\1\25\4\101\1\25"+
    "\1\101\12\25\1\30\1\25\1\30\1\25\1\44\1\25"+
    "\1\30\4\25\2\30\7\25\1\34\2\25\1\35\1\36"+
    "\1\25\1\40\34\25\1\100\3\25\1\106\1\107\1\30"+
    "\1\25\1\30\1\106\1\110\1\25\1\30\4\25\2\30"+
    "\1\25\3\106\1\25\1\106\1\25\1\34\2\25\1\35"+
    "\1\36\1\25\1\40\6\106\1\111\12\106\1\25\4\106"+
    "\1\25\1\106\12\25\1\30\1\25\1\30\1\25\1\44"+
    "\1\25\1\30\4\25\2\30\7\25\1\34\2\25\1\35"+
    "\1\36\1\25\1\40\6\25\1\111\21\25\1\112\6\25"+
    "\1\113\1\114\1\115\1\30\1\116\1\30\1\114\1\117"+
    "\1\120\1\30\1\121\1\122\1\123\1\25\2\30\1\124"+
    "\1\125\2\114\1\25\1\114\1\25\1\34\1\126\1\25"+
    "\1\35\1\127\1\25\1\40\6\114\1\111\12\114\1\25"+
    "\4\114\1\130\1\114\7\25\1\113\1\114\1\115\1\131"+
    "\1\116\1\131\1\114\1\117\1\120\1\131\1\121\1\122"+
    "\1\123\1\25\2\131\1\124\1\125\2\114\1\25\1\114"+
    "\1\25\1\34\1\126\1\25\1\35\1\127\1\25\1\40"+
    "\6\114\1\111\12\114\1\25\4\114\1\130\1\114\6\25"+
    "\4\132\1\30\1\132\1\30\1\132\1\133\1\132\1\30"+
    "\4\132\2\30\7\132\1\134\2\132\1\135\1\136\1\132"+
    "\1\137\21\132\1\61\14\132\76\0\2\26\1\140\3\0"+
    "\2\26\11\0\3\26\1\0\1\26\10\0\6\26\1\0"+
    "\12\26\1\0\4\26\1\0\1\26\7\0\1\141\2\26"+
    "\1\0\2\26\1\141\2\26\1\0\4\26\2\0\16\26"+
    "\1\141\1\26\1\141\1\26\1\141\3\26\1\141\11\26"+
    "\1\141\13\26\4\0\1\30\1\0\1\30\3\0\1\30"+
    "\4\0\2\30\56\0\1\26\1\140\3\0\1\26\1\142"+
    "\11\0\3\26\1\0\1\26\10\0\6\26\1\0\12\26"+
    "\1\0\4\26\1\0\1\26\7\0\2\143\1\144\3\0"+
    "\2\143\11\0\3\143\1\0\1\143\10\0\6\143\1\0"+
    "\12\143\1\0\4\143\1\0\1\143\7\0\2\145\1\146"+
    "\3\0\2\145\11\0\3\145\1\0\1\145\10\0\6\145"+
    "\1\0\12\145\1\0\4\145\1\0\1\145\37\0\1\147"+
    "\100\0\1\150\61\0\1\151\14\0\2\152\2\153\2\154"+
    "\6\0\1\155\1\156\1\157\1\0\1\160\1\0\2\161"+
    "\1\0\1\162\12\0\1\163\1\164\3\0\1\163\1\165"+
    "\11\0\3\163\1\0\1\163\10\0\6\163\1\0\12\163"+
    "\1\0\4\163\1\0\1\163\7\0\2\166\1\167\1\0"+
    "\1\170\11\166\2\0\54\166\10\0\1\142\65\0\2\171"+
    "\1\172\1\0\4\171\1\170\5\171\2\0\54\171\1\0"+
    "\2\173\1\174\1\0\1\175\11\173\2\0\54\173\1\0"+
    "\2\176\1\177\1\0\4\176\1\175\5\176\2\0\54\176"+
    "\23\0\1\200\52\0\2\52\1\201\3\0\2\52\11\0"+
    "\3\52\1\0\1\52\10\0\6\52\1\0\12\52\1\0"+
    "\4\52\1\0\1\52\7\0\1\202\2\52\1\0\2\52"+
    "\1\202\2\52\1\0\4\52\2\0\16\52\1\202\1\52"+
    "\1\202\1\52\1\202\3\52\1\202\11\52\1\202\13\52"+
    "\2\0\1\52\1\201\3\0\1\52\1\142\11\0\3\52"+
    "\1\0\1\52\10\0\6\52\1\0\12\52\1\0\4\52"+
    "\1\0\1\52\7\0\2\56\1\203\3\0\2\56\11\0"+
    "\3\56\1\0\1\56\10\0\6\56\1\0\12\56\1\0"+
    "\4\56\1\0\1\56\7\0\1\204\2\56\1\0\2\56"+
    "\1\204\2\56\1\0\4\56\2\0\16\56\1\204\1\56"+
    "\1\204\1\56\1\204\3\56\1\204\11\56\1\204\13\56"+
    "\2\0\1\56\1\203\3\0\1\56\1\142\11\0\3\56"+
    "\1\0\1\56\10\0\6\56\1\0\12\56\1\0\4\56"+
    "\1\0\1\56\7\0\2\63\1\205\3\0\2\63\11\0"+
    "\3\63\1\0\1\63\10\0\6\63\1\0\12\63\1\0"+
    "\4\63\1\0\1\63\7\0\1\206\2\63\1\0\2\63"+
    "\1\206\2\63\1\0\4\63\2\0\16\63\1\206\1\63"+
    "\1\206\1\63\1\206\3\63\1\206\11\63\1\206\13\63"+
    "\2\0\1\63\1\205\3\0\1\63\1\142\11\0\3\63"+
    "\1\0\1\63\10\0\6\63\1\0\12\63\1\0\4\63"+
    "\1\0\1\63\10\0\1\63\1\205\3\0\1\63\1\207"+
    "\11\0\3\63\1\0\1\63\10\0\6\63\1\0\12\63"+
    "\1\0\4\63\1\0\1\63\6\0\4\210\1\70\1\210"+
    "\1\70\3\210\1\70\2\210\1\0\1\210\2\70\11\210"+
    "\1\0\1\210\1\0\23\210\1\0\4\210\1\0\7\210"+
    "\1\0\2\73\1\211\3\0\2\73\11\0\3\73\1\0"+
    "\1\73\10\0\6\73\1\0\12\73\1\0\4\73\1\0"+
    "\1\73\7\0\1\212\2\73\1\0\2\73\1\212\2\73"+
    "\1\0\4\73\2\0\16\73\1\212\1\73\1\212\1\73"+
    "\1\212\3\73\1\212\11\73\1\212\13\73\2\0\1\73"+
    "\1\211\3\0\1\73\1\142\11\0\3\73\1\0\1\73"+
    "\10\0\6\73\1\0\12\73\1\0\4\73\1\0\1\73"+
    "\77\0\1\76\4\0\2\101\1\213\3\0\2\101\11\0"+
    "\3\101\1\0\1\101\10\0\6\101\1\0\12\101\1\0"+
    "\4\101\1\0\1\101\7\0\1\214\2\101\1\0\2\101"+
    "\1\214\2\101\1\0\4\101\2\0\16\101\1\214\1\101"+
    "\1\214\1\101\1\214\3\101\1\214\11\101\1\214\13\101"+
    "\1\0\2\215\1\216\1\0\1\217\11\215\2\0\54\215"+
    "\2\0\1\101\1\213\3\0\1\101\1\142\11\0\3\101"+
    "\1\0\1\101\10\0\6\101\1\0\12\101\1\0\4\101"+
    "\1\0\1\101\7\0\2\220\1\221\1\0\4\220\1\217"+
    "\5\220\2\0\54\220\1\0\2\106\1\222\3\0\2\106"+
    "\11\0\3\106\1\0\1\106\10\0\6\106\1\0\12\106"+
    "\1\0\4\106\1\0\1\106\7\0\1\223\2\106\1\0"+
    "\2\106\1\223\2\106\1\0\4\106\2\0\16\106\1\223"+
    "\1\106\1\223\1\106\1\223\3\106\1\223\11\106\1\223"+
    "\13\106\2\0\1\106\1\222\3\0\1\106\1\142\11\0"+
    "\3\106\1\0\1\106\10\0\6\106\1\0\12\106\1\0"+
    "\4\106\1\0\1\106\7\0\1\113\1\224\1\225\3\0"+
    "\1\224\1\226\3\0\1\227\5\0\3\224\1\0\1\224"+
    "\10\0\6\224\1\0\12\224\1\0\4\224\1\0\1\224"+
    "\5\0\1\230\1\0\2\114\1\231\3\0\2\114\3\0"+
    "\1\232\5\0\3\114\1\233\1\114\10\0\6\114\1\0"+
    "\12\114\1\0\4\114\1\0\1\114\7\0\1\234\2\114"+
    "\1\0\2\114\1\234\2\114\1\0\4\114\2\0\16\114"+
    "\1\234\1\114\1\234\1\114\1\234\3\114\1\234\11\114"+
    "\1\234\13\114\1\0\2\235\1\236\1\0\1\237\11\235"+
    "\2\0\54\235\1\0\1\113\1\114\1\231\3\0\1\114"+
    "\1\142\3\0\1\227\5\0\3\114\1\0\1\114\10\0"+
    "\6\114\1\0\12\114\1\0\4\114\1\0\1\114\7\0"+
    "\2\240\1\241\1\0\4\240\1\237\5\240\2\0\54\240"+
    "\1\0\1\242\74\0\1\113\12\0\1\227\61\0\2\243"+
    "\1\244\3\0\2\243\11\0\3\243\1\0\1\243\10\0"+
    "\6\243\1\0\12\243\1\0\4\243\1\0\1\243\7\0"+
    "\2\114\1\231\3\0\2\114\3\0\1\232\1\245\4\0"+
    "\1\114\1\246\1\114\1\233\1\114\10\0\6\114\1\0"+
    "\12\114\1\0\4\114\1\0\1\114\12\0\1\247\1\0"+
    "\1\247\3\0\1\247\4\0\2\247\33\0\1\250\20\0"+
    "\4\251\1\131\1\251\1\131\3\251\1\131\4\251\2\131"+
    "\12\251\1\0\11\251\1\0\27\251\4\132\1\0\1\132"+
    "\1\0\3\132\1\0\4\132\2\0\37\132\1\0\20\132"+
    "\1\0\1\132\1\0\1\132\1\252\1\132\1\0\4\132"+
    "\2\0\37\132\1\0\20\132\1\0\1\132\1\0\3\132"+
    "\1\0\4\132\2\0\10\132\1\253\26\132\1\0\20\132"+
    "\1\0\1\132\1\0\3\132\1\0\4\132\2\0\14\132"+
    "\1\254\22\132\1\0\20\132\1\0\1\132\1\0\3\132"+
    "\1\0\4\132\2\0\1\132\1\255\14\132\2\256\2\257"+
    "\10\132\1\260\1\261\3\132\1\0\14\132\1\0\1\262"+
    "\1\26\1\140\1\26\1\0\1\26\1\262\1\26\1\0"+
    "\1\26\4\0\2\26\1\0\3\26\1\0\1\26\10\0"+
    "\1\262\1\26\1\262\1\26\1\262\1\26\1\0\1\26"+
    "\1\262\10\26\1\0\1\262\3\26\1\0\1\26\40\0"+
    "\1\263\43\0\1\264\2\143\1\0\2\143\1\264\2\143"+
    "\1\0\4\143\2\0\16\143\1\264\1\143\1\264\1\143"+
    "\1\264\3\143\1\264\11\143\1\264\13\143\1\0\1\265"+
    "\2\145\1\0\2\145\1\265\2\145\1\0\4\145\2\0"+
    "\16\145\1\265\1\145\1\265\1\145\1\265\3\145\1\265"+
    "\11\145\1\265\13\145\10\0\1\266\64\0\35\150\1\267"+
    "\37\150\23\0\1\270\112\0\2\271\56\0\1\272\21\0"+
    "\1\273\2\0\1\274\101\0\1\275\74\0\1\276\61\0"+
    "\2\277\17\0\1\300\67\0\1\301\64\0\2\302\107\0"+
    "\1\303\52\0\2\304\33\0\2\163\1\164\3\0\2\163"+
    "\11\0\3\163\1\305\1\163\10\0\6\163\1\0\12\163"+
    "\1\0\4\163\1\0\1\163\7\0\1\306\2\163\1\0"+
    "\2\163\1\306\2\163\1\0\4\163\2\0\16\163\1\306"+
    "\1\163\1\306\1\163\1\306\3\163\1\306\11\163\1\306"+
    "\13\163\2\0\1\163\1\164\3\0\1\163\12\0\3\163"+
    "\1\0\1\163\10\0\6\163\1\0\12\163\1\0\4\163"+
    "\1\0\1\163\7\0\1\307\1\166\1\167\1\166\1\310"+
    "\1\166\1\307\10\166\1\311\16\166\1\307\1\166\1\307"+
    "\1\166\1\307\3\166\1\307\11\166\1\307\13\166\1\0"+
    "\1\312\1\171\1\172\3\171\1\312\1\171\1\313\6\171"+
    "\1\314\16\171\1\312\1\171\1\312\1\171\1\312\3\171"+
    "\1\312\11\171\1\312\13\171\1\0\1\315\1\173\1\174"+
    "\1\173\1\316\1\173\1\315\10\173\1\317\16\173\1\315"+
    "\1\173\1\315\1\173\1\315\3\173\1\315\11\173\1\315"+
    "\13\173\1\0\1\320\1\176\1\177\3\176\1\320\1\176"+
    "\1\321\6\176\1\322\16\176\1\320\1\176\1\320\1\176"+
    "\1\320\3\176\1\320\11\176\1\320\13\176\24\0\1\323"+
    "\51\0\1\324\1\52\1\201\1\52\1\0\1\52\1\324"+
    "\1\52\1\0\1\52\4\0\2\52\1\0\3\52\1\0"+
    "\1\52\10\0\1\324\1\52\1\324\1\52\1\324\1\52"+
    "\1\0\1\52\1\324\10\52\1\0\1\324\3\52\1\0"+
    "\1\52\7\0\1\325\1\56\1\203\1\56\1\0\1\56"+
    "\1\325\1\56\1\0\1\56\4\0\2\56\1\0\3\56"+
    "\1\0\1\56\10\0\1\325\1\56\1\325\1\56\1\325"+
    "\1\56\1\0\1\56\1\325\10\56\1\0\1\325\3\56"+
    "\1\0\1\56\7\0\1\326\1\63\1\205\1\63\1\0"+
    "\1\63\1\326\1\63\1\0\1\63\4\0\2\63\1\0"+
    "\3\63\1\0\1\63\10\0\1\326\1\63\1\326\1\63"+
    "\1\326\1\63\1\0\1\63\1\326\10\63\1\0\1\326"+
    "\3\63\1\0\1\63\10\0\1\63\1\205\3\0\1\63"+
    "\12\0\3\63\1\0\1\63\10\0\6\63\1\0\12\63"+
    "\1\0\4\63\1\0\1\63\7\0\1\327\1\73\1\211"+
    "\1\73\1\0\1\73\1\327\1\73\1\0\1\73\4\0"+
    "\2\73\1\0\3\73\1\0\1\73\10\0\1\327\1\73"+
    "\1\327\1\73\1\327\1\73\1\0\1\73\1\327\10\73"+
    "\1\0\1\327\3\73\1\0\1\73\7\0\1\330\1\101"+
    "\1\213\1\101\1\0\1\101\1\330\1\101\1\0\1\101"+
    "\4\0\2\101\1\0\3\101\1\0\1\101\10\0\1\330"+
    "\1\101\1\330\1\101\1\330\1\101\1\0\1\101\1\330"+
    "\10\101\1\0\1\330\3\101\1\0\1\101\7\0\1\331"+
    "\1\215\1\216\1\215\1\332\1\215\1\331\10\215\1\333"+
    "\16\215\1\331\1\215\1\331\1\215\1\331\3\215\1\331"+
    "\11\215\1\331\13\215\1\0\1\334\1\220\1\221\3\220"+
    "\1\334\1\220\1\335\6\220\1\336\16\220\1\334\1\220"+
    "\1\334\1\220\1\334\3\220\1\334\11\220\1\334\13\220"+
    "\1\0\1\337\1\106\1\222\1\106\1\0\1\106\1\337"+
    "\1\106\1\0\1\106\4\0\2\106\1\0\3\106\1\0"+
    "\1\106\10\0\1\337\1\106\1\337\1\106\1\337\1\106"+
    "\1\0\1\106\1\337\10\106\1\0\1\337\3\106\1\0"+
    "\1\106\7\0\2\224\1\225\3\0\2\224\11\0\3\224"+
    "\1\0\1\224\10\0\6\224\1\0\12\224\1\0\4\224"+
    "\1\0\1\224\7\0\1\340\2\224\1\0\2\224\1\340"+
    "\2\224\1\0\4\224\2\0\16\224\1\340\1\224\1\340"+
    "\1\224\1\340\3\224\1\340\11\224\1\340\13\224\2\0"+
    "\1\224\1\225\3\0\1\224\12\0\3\224\1\0\1\224"+
    "\10\0\6\224\1\0\12\224\1\0\4\224\1\0\1\224"+
    "\7\0\2\341\1\342\3\0\2\341\11\0\3\341\1\0"+
    "\1\341\10\0\6\341\1\0\12\341\1\0\4\341\1\0"+
    "\1\341\7\0\1\343\1\114\1\231\1\114\1\0\1\114"+
    "\1\343\1\114\1\0\1\114\1\0\1\232\2\0\2\114"+
    "\1\0\3\114\1\233\1\114\10\0\1\343\1\114\1\343"+
    "\1\114\1\343\1\114\1\0\1\114\1\343\10\114\1\0"+
    "\1\343\3\114\1\0\1\114\7\0\1\344\1\235\1\236"+
    "\1\235\1\345\1\235\1\344\10\235\1\346\16\235\1\344"+
    "\1\235\1\344\1\235\1\344\3\235\1\344\11\235\1\344"+
    "\13\235\1\0\1\347\1\240\1\241\3\240\1\347\1\240"+
    "\1\350\6\240\1\351\16\240\1\347\1\240\1\347\1\240"+
    "\1\347\3\240\1\347\11\240\1\347\13\240\1\0\1\242"+
    "\1\224\1\225\3\0\1\224\1\226\11\0\3\224\1\0"+
    "\1\224\10\0\6\224\1\0\12\224\1\0\4\224\1\0"+
    "\1\224\5\0\1\230\1\0\1\352\2\243\1\0\2\243"+
    "\1\352\2\243\1\0\4\243\2\0\16\243\1\352\1\243"+
    "\1\352\1\243\1\352\3\243\1\352\11\243\1\352\13\243"+
    "\1\0\1\353\5\0\1\353\16\0\2\353\7\0\6\353"+
    "\2\0\2\353\10\0\2\353\13\0\2\114\1\231\3\0"+
    "\2\114\3\0\1\232\5\0\2\114\1\354\1\233\1\114"+
    "\10\0\6\114\1\0\12\114\1\0\4\114\1\0\1\114"+
    "\72\0\1\355\10\0\4\132\1\0\1\132\1\0\3\132"+
    "\1\0\4\132\2\0\11\132\1\356\25\132\1\0\20\132"+
    "\1\0\1\132\1\0\1\132\1\357\1\132\1\0\4\132"+
    "\2\0\37\132\1\0\14\132\4\254\1\150\1\254\1\150"+
    "\3\254\1\150\4\254\2\150\14\254\1\360\22\254\1\150"+
    "\14\254\4\132\1\0\1\132\1\0\3\132\1\0\4\132"+
    "\2\0\2\132\1\361\34\132\1\0\20\132\1\0\1\132"+
    "\1\0\3\132\1\0\4\132\2\0\20\132\2\362\15\132"+
    "\1\0\20\132\1\0\1\132\1\0\3\132\1\0\4\132"+
    "\2\0\3\132\1\363\21\132\1\364\2\132\1\365\6\132"+
    "\1\0\20\132\1\0\1\132\1\0\3\132\1\0\4\132"+
    "\2\0\35\132\1\366\1\132\1\0\20\132\1\0\1\132"+
    "\1\0\3\132\1\0\4\132\2\0\22\132\2\367\13\132"+
    "\1\0\14\132\1\0\1\370\1\26\1\140\1\26\1\0"+
    "\1\26\1\370\1\26\1\0\1\26\4\0\2\26\1\0"+
    "\3\26\1\0\1\26\10\0\1\370\1\26\1\370\1\26"+
    "\1\370\1\26\1\0\1\26\1\370\10\26\1\0\1\370"+
    "\3\26\1\0\1\26\7\0\1\371\1\143\1\144\1\143"+
    "\1\0\1\143\1\371\1\143\1\0\1\143\4\0\2\143"+
    "\1\0\3\143\1\0\1\143\10\0\1\371\1\143\1\371"+
    "\1\143\1\371\1\143\1\0\1\143\1\371\10\143\1\0"+
    "\1\371\3\143\1\0\1\143\7\0\1\372\1\145\1\146"+
    "\1\145\1\0\1\145\1\372\1\145\1\0\1\145\4\0"+
    "\2\145\1\0\3\145\1\0\1\145\10\0\1\372\1\145"+
    "\1\372\1\145\1\372\1\145\1\0\1\145\1\372\10\145"+
    "\1\0\1\372\3\145\1\0\1\145\16\0\1\373\64\0"+
    "\34\150\1\374\1\267\37\150\24\0\1\375\113\0\2\375"+
    "\104\0\1\376\1\377\66\0\2\270\76\0\1\u0100\75\0"+
    "\1\u0101\64\0\2\u0102\107\0\1\u0103\40\0\1\u0104\137\0"+
    "\1\u0105\55\0\2\u0106\63\0\2\u0107\36\0\1\u0108\1\u0109"+
    "\1\305\1\0\1\305\1\u0108\1\u010a\1\0\1\305\4\0"+
    "\2\305\1\0\3\u0108\1\0\1\u0108\10\0\6\u0108\1\0"+
    "\12\u0108\1\0\4\u0108\1\0\1\u0108\7\0\1\u010b\1\163"+
    "\1\164\1\163\1\0\1\163\1\u010b\1\163\1\0\1\163"+
    "\4\0\2\163\1\0\3\163\1\305\1\163\10\0\1\u010b"+
    "\1\163\1\u010b\1\163\1\u010b\1\163\1\0\1\163\1\u010b"+
    "\10\163\1\0\1\u010b\3\163\1\0\1\163\7\0\1\u010c"+
    "\1\166\1\167\1\166\1\170\1\166\1\u010c\27\166\1\u010c"+
    "\1\166\1\u010c\1\166\1\u010c\3\166\1\u010c\11\166\1\u010c"+
    "\13\166\1\0\2\166\1\167\1\0\1\170\12\166\1\0"+
    "\54\166\1\0\1\u010d\1\171\1\172\3\171\1\u010d\1\171"+
    "\1\170\25\171\1\u010d\1\171\1\u010d\1\171\1\u010d\3\171"+
    "\1\u010d\11\171\1\u010d\13\171\1\0\2\171\1\172\1\0"+
    "\4\171\1\170\6\171\1\0\54\171\1\0\1\u010e\1\173"+
    "\1\174\1\173\1\175\1\173\1\u010e\27\173\1\u010e\1\173"+
    "\1\u010e\1\173\1\u010e\3\173\1\u010e\11\173\1\u010e\13\173"+
    "\1\0\2\173\1\174\1\0\1\175\12\173\1\0\54\173"+
    "\1\0\1\u010f\1\176\1\177\3\176\1\u010f\1\176\1\175"+
    "\25\176\1\u010f\1\176\1\u010f\1\176\1\u010f\3\176\1\u010f"+
    "\11\176\1\u010f\13\176\1\0\2\176\1\177\1\0\4\176"+
    "\1\175\6\176\1\0\54\176\25\0\1\u0110\50\0\1\u0111"+
    "\1\52\1\201\1\52\1\0\1\52\1\u0111\1\52\1\0"+
    "\1\52\4\0\2\52\1\0\3\52\1\0\1\52\10\0"+
    "\1\u0111\1\52\1\u0111\1\52\1\u0111\1\52\1\0\1\52"+
    "\1\u0111\10\52\1\0\1\u0111\3\52\1\0\1\52\7\0"+
    "\1\u0112\1\56\1\203\1\56\1\0\1\56\1\u0112\1\56"+
    "\1\0\1\56\4\0\2\56\1\0\3\56\1\0\1\56"+
    "\10\0\1\u0112\1\56\1\u0112\1\56\1\u0112\1\56\1\0"+
    "\1\56\1\u0112\10\56\1\0\1\u0112\3\56\1\0\1\56"+
    "\7\0\1\u0113\1\63\1\205\1\63\1\0\1\63\1\u0113"+
    "\1\63\1\0\1\63\4\0\2\63\1\0\3\63\1\0"+
    "\1\63\10\0\1\u0113\1\63\1\u0113\1\63\1\u0113\1\63"+
    "\1\0\1\63\1\u0113\10\63\1\0\1\u0113\3\63\1\0"+
    "\1\63\7\0\1\u0114\1\73\1\211\1\73\1\0\1\73"+
    "\1\u0114\1\73\1\0\1\73\4\0\2\73\1\0\3\73"+
    "\1\0\1\73\10\0\1\u0114\1\73\1\u0114\1\73\1\u0114"+
    "\1\73\1\0\1\73\1\u0114\10\73\1\0\1\u0114\3\73"+
    "\1\0\1\73\7\0\1\u0115\1\101\1\213\1\101\1\0"+
    "\1\101\1\u0115\1\101\1\0\1\101\4\0\2\101\1\0"+
    "\3\101\1\0\1\101\10\0\1\u0115\1\101\1\u0115\1\101"+
    "\1\u0115\1\101\1\0\1\101\1\u0115\10\101\1\0\1\u0115"+
    "\3\101\1\0\1\101\7\0\1\u0116\1\215\1\216\1\215"+
    "\1\217\1\215\1\u0116\27\215\1\u0116\1\215\1\u0116\1\215"+
    "\1\u0116\3\215\1\u0116\11\215\1\u0116\13\215\1\0\2\215"+
    "\1\216\1\0\1\217\12\215\1\0\54\215\1\0\1\u0117"+
    "\1\220\1\221\3\220\1\u0117\1\220\1\217\25\220\1\u0117"+
    "\1\220\1\u0117\1\220\1\u0117\3\220\1\u0117\11\220\1\u0117"+
    "\13\220\1\0\2\220\1\221\1\0\4\220\1\217\6\220"+
    "\1\0\54\220\1\0\1\u0118\1\106\1\222\1\106\1\0"+
    "\1\106\1\u0118\1\106\1\0\1\106\4\0\2\106\1\0"+
    "\3\106\1\0\1\106\10\0\1\u0118\1\106\1\u0118\1\106"+
    "\1\u0118\1\106\1\0\1\106\1\u0118\10\106\1\0\1\u0118"+
    "\3\106\1\0\1\106\7\0\1\u0119\1\224\1\225\1\224"+
    "\1\0\1\224\1\u0119\1\224\1\0\1\224\4\0\2\224"+
    "\1\0\3\224\1\0\1\224\10\0\1\u0119\1\224\1\u0119"+
    "\1\224\1\u0119\1\224\1\0\1\224\1\u0119\10\224\1\0"+
    "\1\u0119\3\224\1\0\1\224\7\0\2\341\1\342\3\0"+
    "\2\341\3\0\1\232\5\0\3\341\1\0\1\341\10\0"+
    "\6\341\1\0\12\341\1\0\4\341\1\0\1\341\7\0"+
    "\1\u011a\2\341\1\0\2\341\1\u011a\2\341\1\0\4\341"+
    "\2\0\16\341\1\u011a\1\341\1\u011a\1\341\1\u011a\3\341"+
    "\1\u011a\11\341\1\u011a\13\341\1\0\1\u011b\1\114\1\231"+
    "\1\114\1\0\1\114\1\u011b\1\114\1\0\1\114\1\0"+
    "\1\232\2\0\2\114\1\0\3\114\1\233\1\114\10\0"+
    "\1\u011b\1\114\1\u011b\1\114\1\u011b\1\114\1\0\1\114"+
    "\1\u011b\10\114\1\0\1\u011b\3\114\1\0\1\114\7\0"+
    "\1\u011c\1\235\1\236\1\235\1\237\1\235\1\u011c\27\235"+
    "\1\u011c\1\235\1\u011c\1\235\1\u011c\3\235\1\u011c\11\235"+
    "\1\u011c\13\235\1\0\2\235\1\236\1\0\1\237\12\235"+
    "\1\0\54\235\1\0\1\u011d\1\240\1\241\3\240\1\u011d"+
    "\1\240\1\237\25\240\1\u011d\1\240\1\u011d\1\240\1\u011d"+
    "\3\240\1\u011d\11\240\1\u011d\13\240\1\0\2\240\1\241"+
    "\1\0\4\240\1\237\6\240\1\0\54\240\1\0\1\u011e"+
    "\1\243\1\244\1\243\1\0\1\243\1\u011e\1\243\1\0"+
    "\1\243\4\0\2\243\1\0\3\243\1\0\1\243\10\0"+
    "\1\u011e\1\243\1\u011e\1\243\1\u011e\1\243\1\0\1\243"+
    "\1\u011e\10\243\1\0\1\u011e\3\243\1\0\1\243\7\0"+
    "\1\u011f\5\0\1\u011f\1\u0120\15\0\2\u011f\7\0\6\u011f"+
    "\2\0\2\u011f\10\0\2\u011f\13\0\2\114\1\231\3\0"+
    "\2\114\3\0\1\232\5\0\3\114\1\u0121\1\114\10\0"+
    "\6\114\1\0\12\114\1\0\4\114\1\0\1\114\65\0"+
    "\1\u0122\15\0\4\132\1\0\1\132\1\0\1\132\1\u0123"+
    "\1\132\1\0\4\132\2\0\37\132\1\0\14\132\4\254"+
    "\1\150\1\254\1\150\3\254\1\150\4\254\2\150\13\254"+
    "\1\u0124\1\360\22\254\1\150\14\254\4\132\1\0\1\132"+
    "\1\0\3\132\1\0\4\132\2\0\3\132\1\u0125\33\132"+
    "\1\0\20\132\1\0\1\132\1\0\3\132\1\0\4\132"+
    "\2\0\22\132\2\u0125\13\132\1\0\20\132\1\0\1\132"+
    "\1\0\3\132\1\0\4\132\2\0\33\132\1\261\1\u0126"+
    "\2\132\1\0\20\132\1\0\1\132\1\0\3\132\1\0"+
    "\4\132\2\0\26\132\2\361\7\132\1\0\20\132\1\0"+
    "\1\132\1\0\3\132\1\0\4\132\2\0\31\132\1\u0127"+
    "\5\132\1\0\20\132\1\0\1\132\1\0\3\132\1\0"+
    "\4\132\2\0\22\132\2\u0128\13\132\1\0\14\132\1\0"+
    "\1\u0129\1\26\1\140\1\26\1\0\1\26\1\u0129\1\26"+
    "\1\0\1\26\4\0\2\26\1\0\3\26\1\0\1\26"+
    "\10\0\1\u0129\1\26\1\u0129\1\26\1\u0129\1\26\1\0"+
    "\1\26\1\u0129\10\26\1\0\1\u0129\3\26\1\0\1\26"+
    "\7\0\1\u012a\1\143\1\144\1\143\1\0\1\143\1\u012a"+
    "\1\143\1\0\1\143\4\0\2\143\1\0\3\143\1\0"+
    "\1\143\10\0\1\u012a\1\143\1\u012a\1\143\1\u012a\1\143"+
    "\1\0\1\143\1\u012a\10\143\1\0\1\u012a\3\143\1\0"+
    "\1\143\7\0\1\u012b\1\145\1\146\1\145\1\0\1\145"+
    "\1\u012b\1\145\1\0\1\145\4\0\2\145\1\0\3\145"+
    "\1\0\1\145\10\0\1\u012b\1\145\1\u012b\1\145\1\u012b"+
    "\1\145\1\0\1\145\1\u012b\10\145\1\0\1\u012b\3\145"+
    "\1\0\1\145\6\0\45\375\1\u012c\27\375\43\0\2\277"+
    "\71\0\2\277\73\0\2\u012d\104\0\1\u012e\46\0\1\u012f"+
    "\126\0\1\u0130\72\0\1\u0131\61\0\2\u0132\55\0\1\u0133"+
    "\125\0\1\u0134\21\0\2\u0108\1\u0109\1\u0135\1\0\1\u0135"+
    "\2\u0108\1\0\1\u0135\1\u0136\3\0\2\u0135\1\0\3\u0108"+
    "\1\0\1\u0108\10\0\6\u0108\1\0\12\u0108\1\0\4\u0108"+
    "\1\0\1\u0108\7\0\1\u0137\2\u0108\1\0\2\u0108\1\u0137"+
    "\2\u0108\1\0\4\u0108\2\0\16\u0108\1\u0137\1\u0108\1\u0137"+
    "\1\u0108\1\u0137\3\u0108\1\u0137\11\u0108\1\u0137\13\u0108\2\0"+
    "\1\u0108\1\u0109\3\0\1\u0108\12\0\3\u0108\1\0\1\u0108"+
    "\10\0\6\u0108\1\0\12\u0108\1\0\4\u0108\1\0\1\u0108"+
    "\7\0\1\u0138\1\163\1\164\1\163\1\0\1\163\1\u0138"+
    "\1\163\1\0\1\163\4\0\2\163\1\0\3\163\1\305"+
    "\1\163\10\0\1\u0138\1\163\1\u0138\1\163\1\u0138\1\163"+
    "\1\0\1\163\1\u0138\10\163\1\0\1\u0138\3\163\1\0"+
    "\1\163\7\0\1\u0139\1\166\1\167\1\166\1\170\1\166"+
    "\1\u0139\27\166\1\u0139\1\166\1\u0139\1\166\1\u0139\3\166"+
    "\1\u0139\11\166\1\u0139\13\166\1\0\1\u013a\1\171\1\172"+
    "\3\171\1\u013a\1\171\1\170\25\171\1\u013a\1\171\1\u013a"+
    "\1\171\1\u013a\3\171\1\u013a\11\171\1\u013a\13\171\1\0"+
    "\1\u013b\1\173\1\174\1\173\1\175\1\173\1\u013b\27\173"+
    "\1\u013b\1\173\1\u013b\1\173\1\u013b\3\173\1\u013b\11\173"+
    "\1\u013b\13\173\1\0\1\u013c\1\176\1\177\3\176\1\u013c"+
    "\1\176\1\175\25\176\1\u013c\1\176\1\u013c\1\176\1\u013c"+
    "\3\176\1\u013c\11\176\1\u013c\13\176\1\0\2\u013d\1\u013e"+
    "\1\u0110\1\u013f\1\u0110\2\u013d\1\u0140\1\u0110\1\u0141\3\u013d"+
    "\2\u0110\4\u013d\1\0\47\u013d\1\0\1\u0142\1\52\1\201"+
    "\1\52\1\0\1\52\1\u0142\1\52\1\0\1\52\4\0"+
    "\2\52\1\0\3\52\1\0\1\52\10\0\1\u0142\1\52"+
    "\1\u0142\1\52\1\u0142\1\52\1\0\1\52\1\u0142\10\52"+
    "\1\0\1\u0142\3\52\1\0\1\52\7\0\1\u0143\1\56"+
    "\1\203\1\56\1\0\1\56\1\u0143\1\56\1\0\1\56"+
    "\4\0\2\56\1\0\3\56\1\0\1\56\10\0\1\u0143"+
    "\1\56\1\u0143\1\56\1\u0143\1\56\1\0\1\56\1\u0143"+
    "\10\56\1\0\1\u0143\3\56\1\0\1\56\7\0\1\u0144"+
    "\1\63\1\205\1\63\1\0\1\63\1\u0144\1\63\1\0"+
    "\1\63\4\0\2\63\1\0\3\63\1\0\1\63\10\0"+
    "\1\u0144\1\63\1\u0144\1\63\1\u0144\1\63\1\0\1\63"+
    "\1\u0144\10\63\1\0\1\u0144\3\63\1\0\1\63\7\0"+
    "\1\u0145\1\73\1\211\1\73\1\0\1\73\1\u0145\1\73"+
    "\1\0\1\73\4\0\2\73\1\0\3\73\1\0\1\73"+
    "\10\0\1\u0145\1\73\1\u0145\1\73\1\u0145\1\73\1\0"+
    "\1\73\1\u0145\10\73\1\0\1\u0145\3\73\1\0\1\73"+
    "\7\0\1\u0146\1\101\1\213\1\101\1\0\1\101\1\u0146"+
    "\1\101\1\0\1\101\4\0\2\101\1\0\3\101\1\0"+
    "\1\101\10\0\1\u0146\1\101\1\u0146\1\101\1\u0146\1\101"+
    "\1\0\1\101\1\u0146\10\101\1\0\1\u0146\3\101\1\0"+
    "\1\101\7\0\1\u0147\1\215\1\216\1\215\1\217\1\215"+
    "\1\u0147\27\215\1\u0147\1\215\1\u0147\1\215\1\u0147\3\215"+
    "\1\u0147\11\215\1\u0147\13\215\1\0\1\u0148\1\220\1\221"+
    "\3\220\1\u0148\1\220\1\217\25\220\1\u0148\1\220\1\u0148"+
    "\1\220\1\u0148\3\220\1\u0148\11\220\1\u0148\13\220\1\0"+
    "\1\u0149\1\106\1\222\1\106\1\0\1\106\1\u0149\1\106"+
    "\1\0\1\106\4\0\2\106\1\0\3\106\1\0\1\106"+
    "\10\0\1\u0149\1\106\1\u0149\1\106\1\u0149\1\106\1\0"+
    "\1\106\1\u0149\10\106\1\0\1\u0149\3\106\1\0\1\106"+
    "\7\0\1\u014a\1\224\1\225\1\224\1\0\1\224\1\u014a"+
    "\1\224\1\0\1\224\4\0\2\224\1\0\3\224\1\0"+
    "\1\224\10\0\1\u014a\1\224\1\u014a\1\224\1\u014a\1\224"+
    "\1\0\1\224\1\u014a\10\224\1\0\1\u014a\3\224\1\0"+
    "\1\224\7\0\1\u014b\1\341\1\342\1\341\1\0\1\341"+
    "\1\u014b\1\341\1\0\1\341\1\0\1\232\2\0\2\341"+
    "\1\0\3\341\1\0\1\341\10\0\1\u014b\1\341\1\u014b"+
    "\1\341\1\u014b\1\341\1\0\1\341\1\u014b\10\341\1\0"+
    "\1\u014b\3\341\1\0\1\341\7\0\1\u014c\1\114\1\231"+
    "\1\114\1\0\1\114\1\u014c\1\114\1\0\1\114\1\0"+
    "\1\232\2\0\2\114\1\0\3\114\1\233\1\114\10\0"+
    "\1\u014c\1\114\1\u014c\1\114\1\u014c\1\114\1\0\1\114"+
    "\1\u014c\10\114\1\0\1\u014c\3\114\1\0\1\114\7\0"+
    "\1\u014d\1\235\1\236\1\235\1\237\1\235\1\u014d\27\235"+
    "\1\u014d\1\235\1\u014d\1\235\1\u014d\3\235\1\u014d\11\235"+
    "\1\u014d\13\235\1\0\1\u014e\1\240\1\241\3\240\1\u014e"+
    "\1\240\1\237\25\240\1\u014e\1\240\1\u014e\1\240\1\u014e"+
    "\3\240\1\u014e\11\240\1\u014e\13\240\1\0\1\u014f\1\243"+
    "\1\244\1\243\1\0\1\243\1\u014f\1\243\1\0\1\243"+
    "\4\0\2\243\1\0\3\243\1\0\1\243\10\0\1\u014f"+
    "\1\243\1\u014f\1\243\1\u014f\1\243\1\0\1\243\1\u014f"+
    "\10\243\1\0\1\u014f\3\243\1\0\1\243\7\0\1\u0150"+
    "\5\0\1\u0150\1\u0120\15\0\2\u0150\7\0\6\u0150\2\0"+
    "\2\u0150\10\0\2\u0150\13\0\1\u0151\5\0\1\u0151\16\0"+
    "\2\u0151\7\0\6\u0151\2\0\2\u0151\10\0\2\u0151\13\0"+
    "\2\u0152\1\u0153\1\u0154\1\u0155\1\u0154\2\u0152\1\u0156\1\u0154"+
    "\1\u0157\3\u0152\2\u0154\4\u0152\1\0\47\u0152\56\0\1\u0158"+
    "\16\0\4\u0125\1\375\1\u0125\1\375\3\u0125\1\375\4\u0125"+
    "\2\375\24\u0125\1\u0159\12\u0125\1\375\14\u0125\4\132\1\0"+
    "\1\132\1\0\3\132\1\0\4\132\2\0\20\132\2\367"+
    "\15\132\1\0\20\132\1\0\1\132\1\0\3\132\1\0"+
    "\4\132\2\0\20\132\2\u015a\15\132\1\0\20\132\1\0"+
    "\1\132\1\0\3\132\1\0\4\132\2\0\3\132\1\u015b"+
    "\33\132\1\0\14\132\1\0\1\u015c\1\26\1\140\1\26"+
    "\1\0\1\26\1\u015c\1\26\1\0\1\26\4\0\2\26"+
    "\1\0\3\26\1\0\1\26\10\0\1\u015c\1\26\1\u015c"+
    "\1\26\1\u015c\1\26\1\0\1\26\1\u015c\10\26\1\0"+
    "\1\u015c\3\26\1\0\1\26\7\0\1\u015d\1\143\1\144"+
    "\1\143\1\0\1\143\1\u015d\1\143\1\0\1\143\4\0"+
    "\2\143\1\0\3\143\1\0\1\143\10\0\1\u015d\1\143"+
    "\1\u015d\1\143\1\u015d\1\143\1\0\1\143\1\u015d\10\143"+
    "\1\0\1\u015d\3\143\1\0\1\143\7\0\1\u015e\1\145"+
    "\1\146\1\145\1\0\1\145\1\u015e\1\145\1\0\1\145"+
    "\4\0\2\145\1\0\3\145\1\0\1\145\10\0\1\u015e"+
    "\1\145\1\u015e\1\145\1\u015e\1\145\1\0\1\145\1\u015e"+
    "\10\145\1\0\1\u015e\3\145\1\0\1\145\31\0\1\u015f"+
    "\61\0\1\u0160\140\0\1\u0161\43\0\1\u0162\123\0\1\u0163"+
    "\77\0\1\u0164\66\0\2\u0165\30\0\1\u0135\1\0\1\u0135"+
    "\3\0\1\u0135\1\u0136\3\0\2\u0135\55\0\1\u0166\1\u0108"+
    "\1\u0109\1\u0108\1\0\1\u0108\1\u0166\1\u0108\1\0\1\u0108"+
    "\1\u0136\3\0\2\u0108\1\0\3\u0108\1\0\1\u0108\10\0"+
    "\1\u0166\1\u0108\1\u0166\1\u0108\1\u0166\1\u0108\1\0\1\u0108"+
    "\1\u0166\10\u0108\1\0\1\u0166\3\u0108\1\0\1\u0108\7\0"+
    "\1\u0167\1\163\1\164\1\163\1\0\1\163\1\u0167\1\163"+
    "\1\0\1\163\4\0\2\163\1\0\3\163\1\305\1\163"+
    "\10\0\1\u0167\1\163\1\u0167\1\163\1\u0167\1\163\1\0"+
    "\1\163\1\u0167\10\163\1\0\1\u0167\3\163\1\0\1\163"+
    "\7\0\1\u0168\1\166\1\167\1\166\1\170\1\166\1\u0168"+
    "\27\166\1\u0168\1\166\1\u0168\1\166\1\u0168\3\166\1\u0168"+
    "\11\166\1\u0168\13\166\1\0\1\u0169\1\171\1\172\3\171"+
    "\1\u0169\1\171\1\170\25\171\1\u0169\1\171\1\u0169\1\171"+
    "\1\u0169\3\171\1\u0169\11\171\1\u0169\13\171\1\0\1\u016a"+
    "\1\173\1\174\1\173\1\175\1\173\1\u016a\27\173\1\u016a"+
    "\1\173\1\u016a\1\173\1\u016a\3\173\1\u016a\11\173\1\u016a"+
    "\13\173\1\0\1\u016b\1\176\1\177\3\176\1\u016b\1\176"+
    "\1\175\25\176\1\u016b\1\176\1\u016b\1\176\1\u016b\3\176"+
    "\1\u016b\11\176\1\u016b\13\176\1\0\2\u013d\1\u013e\1\u016c"+
    "\1\0\3\u013d\1\0\1\u016c\1\u0141\3\u013d\2\u016c\4\u013d"+
    "\1\0\47\u013d\1\0\1\u016d\1\u013d\1\u013e\1\u016c\2\u013d"+
    "\1\u016d\2\u013d\1\u016c\1\u016e\3\u013d\2\u016c\16\u013d\1\u016d"+
    "\1\u013d\1\u016d\1\u013d\1\u016d\3\u013d\1\u016d\11\u013d\1\u016d"+
    "\13\u013d\1\0\2\u013f\1\u016f\1\0\1\u016c\11\u013f\2\0"+
    "\54\u013f\1\0\2\u0140\1\u0170\1\0\4\u0140\1\u016c\5\u0140"+
    "\2\0\54\u0140\1\0\1\u0171\1\52\1\201\1\52\1\0"+
    "\1\52\1\u0171\1\52\1\0\1\52\4\0\2\52\1\0"+
    "\3\52\1\0\1\52\10\0\1\u0171\1\52\1\u0171\1\52"+
    "\1\u0171\1\52\1\0\1\52\1\u0171\10\52\1\0\1\u0171"+
    "\3\52\1\0\1\52\7\0\1\u0172\1\56\1\203\1\56"+
    "\1\0\1\56\1\u0172\1\56\1\0\1\56\4\0\2\56"+
    "\1\0\3\56\1\0\1\56\10\0\1\u0172\1\56\1\u0172"+
    "\1\56\1\u0172\1\56\1\0\1\56\1\u0172\10\56\1\0"+
    "\1\u0172\3\56\1\0\1\56\7\0\1\u0173\1\63\1\205"+
    "\1\63\1\0\1\63\1\u0173\1\63\1\0\1\63\4\0"+
    "\2\63\1\0\3\63\1\0\1\63\10\0\1\u0173\1\63"+
    "\1\u0173\1\63\1\u0173\1\63\1\0\1\63\1\u0173\10\63"+
    "\1\0\1\u0173\3\63\1\0\1\63\7\0\1\u0174\1\73"+
    "\1\211\1\73\1\0\1\73\1\u0174\1\73\1\0\1\73"+
    "\4\0\2\73\1\0\3\73\1\0\1\73\10\0\1\u0174"+
    "\1\73\1\u0174\1\73\1\u0174\1\73\1\0\1\73\1\u0174"+
    "\10\73\1\0\1\u0174\3\73\1\0\1\73\7\0\1\u0175"+
    "\1\101\1\213\1\101\1\0\1\101\1\u0175\1\101\1\0"+
    "\1\101\4\0\2\101\1\0\3\101\1\0\1\101\10\0"+
    "\1\u0175\1\101\1\u0175\1\101\1\u0175\1\101\1\0\1\101"+
    "\1\u0175\10\101\1\0\1\u0175\3\101\1\0\1\101\7\0"+
    "\1\u0176\1\215\1\216\1\215\1\217\1\215\1\u0176\27\215"+
    "\1\u0176\1\215\1\u0176\1\215\1\u0176\3\215\1\u0176\11\215"+
    "\1\u0176\13\215\1\0\1\u0177\1\220\1\221\3\220\1\u0177"+
    "\1\220\1\217\25\220\1\u0177\1\220\1\u0177\1\220\1\u0177"+
    "\3\220\1\u0177\11\220\1\u0177\13\220\1\0\1\u0178\1\106"+
    "\1\222\1\106\1\0\1\106\1\u0178\1\106\1\0\1\106"+
    "\4\0\2\106\1\0\3\106\1\0\1\106\10\0\1\u0178"+
    "\1\106\1\u0178\1\106\1\u0178\1\106\1\0\1\106\1\u0178"+
    "\10\106\1\0\1\u0178\3\106\1\0\1\106\7\0\1\u0179"+
    "\1\224\1\225\1\224\1\0\1\224\1\u0179\1\224\1\0"+
    "\1\224\4\0\2\224\1\0\3\224\1\0\1\224\10\0"+
    "\1\u0179\1\224\1\u0179\1\224\1\u0179\1\224\1\0\1\224"+
    "\1\u0179\10\224\1\0\1\u0179\3\224\1\0\1\224\7\0"+
    "\1\u017a\1\341\1\342\1\341\1\0\1\341\1\u017a\1\341"+
    "\1\0\1\341\1\0\1\232\2\0\2\341\1\0\3\341"+
    "\1\0\1\341\10\0\1\u017a\1\341\1\u017a\1\341\1\u017a"+
    "\1\341\1\0\1\341\1\u017a\10\341\1\0\1\u017a\3\341"+
    "\1\0\1\341\7\0\1\u017b\1\114\1\231\1\114\1\0"+
    "\1\114\1\u017b\1\114\1\0\1\114\1\0\1\232\2\0"+
    "\2\114\1\0\3\114\1\233\1\114\10\0\1\u017b\1\114"+
    "\1\u017b\1\114\1\u017b\1\114\1\0\1\114\1\u017b\10\114"+
    "\1\0\1\u017b\3\114\1\0\1\114\7\0\1\u017c\1\235"+
    "\1\236\1\235\1\237\1\235\1\u017c\27\235\1\u017c\1\235"+
    "\1\u017c\1\235\1\u017c\3\235\1\u017c\11\235\1\u017c\13\235"+
    "\1\0\1\u017d\1\240\1\241\3\240\1\u017d\1\240\1\237"+
    "\25\240\1\u017d\1\240\1\u017d\1\240\1\u017d\3\240\1\u017d"+
    "\11\240\1\u017d\13\240\1\0\1\u017e\1\243\1\244\1\243"+
    "\1\0\1\243\1\u017e\1\243\1\0\1\243\4\0\2\243"+
    "\1\0\3\243\1\0\1\243\10\0\1\u017e\1\243\1\u017e"+
    "\1\243\1\u017e\1\243\1\0\1\243\1\u017e\10\243\1\0"+
    "\1\u017e\3\243\1\0\1\243\7\0\1\u017f\5\0\1\u017f"+
    "\1\u0120\15\0\2\u017f\7\0\6\u017f\2\0\2\u017f\10\0"+
    "\2\u017f\13\0\1\u0180\5\0\1\u0180\16\0\2\u0180\7\0"+
    "\6\u0180\2\0\2\u0180\10\0\2\u0180\13\0\2\u0152\1\u0153"+
    "\1\u0181\1\0\3\u0152\1\0\1\u0181\1\u0157\3\u0152\2\u0181"+
    "\4\u0152\1\0\47\u0152\1\0\1\u0182\1\u0152\1\u0153\1\u0181"+
    "\2\u0152\1\u0182\2\u0152\1\u0181\1\u0183\3\u0152\2\u0181\16\u0152"+
    "\1\u0182\1\u0152\1\u0182\1\u0152\1\u0182\3\u0152\1\u0182\11\u0152"+
    "\1\u0182\13\u0152\1\0\2\u0155\1\u0184\1\0\1\u0181\11\u0155"+
    "\2\0\54\u0155\1\0\2\u0156\1\u0185\1\0\4\u0156\1\u0181"+
    "\5\u0156\2\0\54\u0156\23\0\1\u0186\51\0\4\132\1\0"+
    "\1\132\1\0\3\132\1\0\4\132\2\0\2\132\1\u0187"+
    "\34\132\1\0\20\132\1\0\1\132\1\0\3\132\1\0"+
    "\4\132\2\0\33\132\1\u0188\3\132\1\0\14\132\1\0"+
    "\1\u0189\1\26\1\140\1\26\1\0\1\26\1\u0189\1\26"+
    "\1\0\1\26\4\0\2\26\1\0\3\26\1\0\1\26"+
    "\10\0\1\u0189\1\26\1\u0189\1\26\1\u0189\1\26\1\0"+
    "\1\26\1\u0189\10\26\1\0\1\u0189\3\26\1\0\1\26"+
    "\7\0\1\u018a\1\143\1\144\1\143\1\0\1\143\1\u018a"+
    "\1\143\1\0\1\143\4\0\2\143\1\0\3\143\1\0"+
    "\1\143\10\0\1\u018a\1\143\1\u018a\1\143\1\u018a\1\143"+
    "\1\0\1\143\1\u018a\10\143\1\0\1\u018a\3\143\1\0"+
    "\1\143\7\0\1\u018b\1\145\1\146\1\145\1\0\1\145"+
    "\1\u018b\1\145\1\0\1\145\4\0\2\145\1\0\3\145"+
    "\1\0\1\145\10\0\1\u018b\1\145\1\u018b\1\145\1\u018b"+
    "\1\145\1\0\1\145\1\u018b\10\145\1\0\1\u018b\3\145"+
    "\1\0\1\145\61\0\1\273\64\0\2\u018c\107\0\1\277"+
    "\67\0\1\u018d\63\0\2\u018e\73\0\2\u018f\33\0\1\u0190"+
    "\1\u0108\1\u0109\1\u0108\1\0\1\u0108\1\u0190\1\u0108\1\0"+
    "\1\u0108\1\u0136\3\0\2\u0108\1\0\3\u0108\1\0\1\u0108"+
    "\10\0\1\u0190\1\u0108\1\u0190\1\u0108\1\u0190\1\u0108\1\0"+
    "\1\u0108\1\u0190\10\u0108\1\0\1\u0190\3\u0108\1\0\1\u0108"+
    "\7\0\1\u0191\1\163\1\164\1\163\1\0\1\163\1\u0191"+
    "\1\163\1\0\1\163\4\0\2\163\1\0\3\163\1\305"+
    "\1\163\10\0\1\u0191\1\163\1\u0191\1\163\1\u0191\1\163"+
    "\1\0\1\163\1\u0191\10\163\1\0\1\u0191\3\163\1\0"+
    "\1\163\7\0\1\u0192\1\166\1\167\1\166\1\170\1\166"+
    "\1\u0192\27\166\1\u0192\1\166\1\u0192\1\166\1\u0192\3\166"+
    "\1\u0192\11\166\1\u0192\13\166\1\0\1\u0193\1\171\1\172"+
    "\3\171\1\u0193\1\171\1\170\25\171\1\u0193\1\171\1\u0193"+
    "\1\171\1\u0193\3\171\1\u0193\11\171\1\u0193\13\171\1\0"+
    "\1\u0194\1\173\1\174\1\173\1\175\1\173\1\u0194\27\173"+
    "\1\u0194\1\173\1\u0194\1\173\1\u0194\3\173\1\u0194\11\173"+
    "\1\u0194\13\173\1\0\1\u0195\1\176\1\177\3\176\1\u0195"+
    "\1\176\1\175\25\176\1\u0195\1\176\1\u0195\1\176\1\u0195"+
    "\3\176\1\u0195\11\176\1\u0195\13\176\4\0\1\u016c\1\0"+
    "\1\u016c\3\0\1\u016c\1\u0141\3\0\2\u016c\55\0\1\u0196"+
    "\1\u013d\1\u013e\1\u013d\1\0\1\u013d\1\u0196\1\u013d\1\0"+
    "\1\u013d\1\u0141\11\u013d\1\0\11\u013d\1\u0196\1\u013d\1\u0196"+
    "\1\u013d\1\u0196\3\u013d\1\u0196\11\u013d\1\u0196\13\u013d\1\0"+
    "\1\u0197\1\u013f\1\u016f\1\u013f\1\u0198\1\u013f\1\u0197\10\u013f"+
    "\1\u0199\16\u013f\1\u0197\1\u013f\1\u0197\1\u013f\1\u0197\3\u013f"+
    "\1\u0197\11\u013f\1\u0197\13\u013f\1\0\1\u019a\1\u0140\1\u0170"+
    "\3\u0140\1\u019a\1\u0140\1\u019b\6\u0140\1\u019c\16\u0140\1\u019a"+
    "\1\u0140\1\u019a\1\u0140\1\u019a\3\u0140\1\u019a\11\u0140\1\u019a"+
    "\13\u0140\1\0\1\u019d\1\52\1\201\1\52\1\0\1\52"+
    "\1\u019d\1\52\1\0\1\52\4\0\2\52\1\0\3\52"+
    "\1\0\1\52\10\0\1\u019d\1\52\1\u019d\1\52\1\u019d"+
    "\1\52\1\0\1\52\1\u019d\10\52\1\0\1\u019d\3\52"+
    "\1\0\1\52\7\0\1\u019e\1\56\1\203\1\56\1\0"+
    "\1\56\1\u019e\1\56\1\0\1\56\4\0\2\56\1\0"+
    "\3\56\1\0\1\56\10\0\1\u019e\1\56\1\u019e\1\56"+
    "\1\u019e\1\56\1\0\1\56\1\u019e\10\56\1\0\1\u019e"+
    "\3\56\1\0\1\56\7\0\1\u019f\1\63\1\205\1\63"+
    "\1\0\1\63\1\u019f\1\63\1\0\1\63\4\0\2\63"+
    "\1\0\3\63\1\0\1\63\10\0\1\u019f\1\63\1\u019f"+
    "\1\63\1\u019f\1\63\1\0\1\63\1\u019f\10\63\1\0"+
    "\1\u019f\3\63\1\0\1\63\7\0\1\u01a0\1\73\1\211"+
    "\1\73\1\0\1\73\1\u01a0\1\73\1\0\1\73\4\0"+
    "\2\73\1\0\3\73\1\0\1\73\10\0\1\u01a0\1\73"+
    "\1\u01a0\1\73\1\u01a0\1\73\1\0\1\73\1\u01a0\10\73"+
    "\1\0\1\u01a0\3\73\1\0\1\73\7\0\1\u01a1\1\101"+
    "\1\213\1\101\1\0\1\101\1\u01a1\1\101\1\0\1\101"+
    "\4\0\2\101\1\0\3\101\1\0\1\101\10\0\1\u01a1"+
    "\1\101\1\u01a1\1\101\1\u01a1\1\101\1\0\1\101\1\u01a1"+
    "\10\101\1\0\1\u01a1\3\101\1\0\1\101\7\0\1\u01a2"+
    "\1\215\1\216\1\215\1\217\1\215\1\u01a2\27\215\1\u01a2"+
    "\1\215\1\u01a2\1\215\1\u01a2\3\215\1\u01a2\11\215\1\u01a2"+
    "\13\215\1\0\1\u01a3\1\220\1\221\3\220\1\u01a3\1\220"+
    "\1\217\25\220\1\u01a3\1\220\1\u01a3\1\220\1\u01a3\3\220"+
    "\1\u01a3\11\220\1\u01a3\13\220\1\0\1\u01a4\1\106\1\222"+
    "\1\106\1\0\1\106\1\u01a4\1\106\1\0\1\106\4\0"+
    "\2\106\1\0\3\106\1\0\1\106\10\0\1\u01a4\1\106"+
    "\1\u01a4\1\106\1\u01a4\1\106\1\0\1\106\1\u01a4\10\106"+
    "\1\0\1\u01a4\3\106\1\0\1\106\7\0\1\u01a5\1\224"+
    "\1\225\1\224\1\0\1\224\1\u01a5\1\224\1\0\1\224"+
    "\4\0\2\224\1\0\3\224\1\0\1\224\10\0\1\u01a5"+
    "\1\224\1\u01a5\1\224\1\u01a5\1\224\1\0\1\224\1\u01a5"+
    "\10\224\1\0\1\u01a5\3\224\1\0\1\224\7\0\1\u01a6"+
    "\1\341\1\342\1\341\1\0\1\341\1\u01a6\1\341\1\0"+
    "\1\341\1\0\1\232\2\0\2\341\1\0\3\341\1\0"+
    "\1\341\10\0\1\u01a6\1\341\1\u01a6\1\341\1\u01a6\1\341"+
    "\1\0\1\341\1\u01a6\10\341\1\0\1\u01a6\3\341\1\0"+
    "\1\341\7\0\1\u01a7\1\114\1\231\1\114\1\0\1\114"+
    "\1\u01a7\1\114\1\0\1\114\1\0\1\232\2\0\2\114"+
    "\1\0\3\114\1\233\1\114\10\0\1\u01a7\1\114\1\u01a7"+
    "\1\114\1\u01a7\1\114\1\0\1\114\1\u01a7\10\114\1\0"+
    "\1\u01a7\3\114\1\0\1\114\7\0\1\u01a8\1\235\1\236"+
    "\1\235\1\237\1\235\1\u01a8\27\235\1\u01a8\1\235\1\u01a8"+
    "\1\235\1\u01a8\3\235\1\u01a8\11\235\1\u01a8\13\235\1\0"+
    "\1\u01a9\1\240\1\241\3\240\1\u01a9\1\240\1\237\25\240"+
    "\1\u01a9\1\240\1\u01a9\1\240\1\u01a9\3\240\1\u01a9\11\240"+
    "\1\u01a9\13\240\1\0\1\u01aa\1\243\1\244\1\243\1\0"+
    "\1\243\1\u01aa\1\243\1\0\1\243\4\0\2\243\1\0"+
    "\3\243\1\0\1\243\10\0\1\u01aa\1\243\1\u01aa\1\243"+
    "\1\u01aa\1\243\1\0\1\243\1\u01aa\10\243\1\0\1\u01aa"+
    "\3\243\1\0\1\243\7\0\1\u01ab\5\0\1\u01ab\1\u0120"+
    "\15\0\2\u01ab\7\0\6\u01ab\2\0\2\u01ab\10\0\2\u01ab"+
    "\13\0\1\u01ac\5\0\1\u01ac\16\0\2\u01ac\7\0\6\u01ac"+
    "\2\0\2\u01ac\10\0\2\u01ac\16\0\1\u0181\1\0\1\u0181"+
    "\3\0\1\u0181\1\u0157\3\0\2\u0181\55\0\1\u01ad\1\u0152"+
    "\1\u0153\1\u0152\1\0\1\u0152\1\u01ad\1\u0152\1\0\1\u0152"+
    "\1\u0157\11\u0152\1\0\11\u0152\1\u01ad\1\u0152\1\u01ad\1\u0152"+
    "\1\u01ad\3\u0152\1\u01ad\11\u0152\1\u01ad\13\u0152\1\0\1\u01ae"+
    "\1\u0155\1\u0184\1\u0155\1\u01af\1\u0155\1\u01ae\10\u0155\1\u01b0"+
    "\16\u0155\1\u01ae\1\u0155\1\u01ae\1\u0155\1\u01ae\3\u0155\1\u01ae"+
    "\11\u0155\1\u01ae\13\u0155\1\0\1\u01b1\1\u0156\1\u0185\3\u0156"+
    "\1\u01b1\1\u0156\1\u01b2\6\u0156\1\u01b3\16\u0156\1\u01b1\1\u0156"+
    "\1\u01b1\1\u0156\1\u01b1\3\u0156\1\u01b1\11\u0156\1\u01b1\13\u0156"+
    "\52\0\1\u01b4\22\0\4\132\1\0\1\132\1\0\3\132"+
    "\1\0\4\132\2\0\32\132\1\364\4\132\1\0\20\132"+
    "\1\0\1\132\1\0\3\132\1\0\4\132\2\0\36\132"+
    "\1\367\1\0\14\132\1\0\2\26\1\140\1\26\1\0"+
    "\3\26\1\0\1\26\4\0\2\26\1\0\3\26\1\0"+
    "\1\26\10\0\6\26\1\0\12\26\1\0\4\26\1\0"+
    "\1\26\7\0\1\u01b5\1\143\1\144\1\143\1\0\1\143"+
    "\1\u01b5\1\143\1\0\1\143\4\0\2\143\1\0\3\143"+
    "\1\0\1\143\10\0\1\u01b5\1\143\1\u01b5\1\143\1\u01b5"+
    "\1\143\1\0\1\143\1\u01b5\10\143\1\0\1\u01b5\3\143"+
    "\1\0\1\143\7\0\1\u01b6\1\145\1\146\1\145\1\0"+
    "\1\145\1\u01b6\1\145\1\0\1\145\4\0\2\145\1\0"+
    "\3\145\1\0\1\145\10\0\1\u01b6\1\145\1\u01b6\1\145"+
    "\1\u01b6\1\145\1\0\1\145\1\u01b6\10\145\1\0\1\u01b6"+
    "\3\145\1\0\1\145\55\0\2\u01b7\76\0\1\u01b8\23\0"+
    "\1\u01b9\1\u0108\1\u0109\1\u0108\1\0\1\u0108\1\u01b9\1\u0108"+
    "\1\0\1\u0108\1\u0136\3\0\2\u0108\1\0\3\u0108\1\0"+
    "\1\u0108\10\0\1\u01b9\1\u0108\1\u01b9\1\u0108\1\u01b9\1\u0108"+
    "\1\0\1\u0108\1\u01b9\10\u0108\1\0\1\u01b9\3\u0108\1\0"+
    "\1\u0108\7\0\1\u01ba\1\163\1\164\1\163\1\0\1\163"+
    "\1\u01ba\1\163\1\0\1\163\4\0\2\163\1\0\3\163"+
    "\1\305\1\163\10\0\1\u01ba\1\163\1\u01ba\1\163\1\u01ba"+
    "\1\163\1\0\1\163\1\u01ba\10\163\1\0\1\u01ba\3\163"+
    "\1\0\1\163\7\0\1\u01bb\1\166\1\167\1\166\1\170"+
    "\1\166\1\u01bb\27\166\1\u01bb\1\166\1\u01bb\1\166\1\u01bb"+
    "\3\166\1\u01bb\11\166\1\u01bb\13\166\1\0\1\u01bc\1\171"+
    "\1\172\3\171\1\u01bc\1\171\1\170\25\171\1\u01bc\1\171"+
    "\1\u01bc\1\171\1\u01bc\3\171\1\u01bc\11\171\1\u01bc\13\171"+
    "\1\0\1\u01bd\1\173\1\174\1\173\1\175\1\173\1\u01bd"+
    "\27\173\1\u01bd\1\173\1\u01bd\1\173\1\u01bd\3\173\1\u01bd"+
    "\11\173\1\u01bd\13\173\1\0\1\u01be\1\176\1\177\3\176"+
    "\1\u01be\1\176\1\175\25\176\1\u01be\1\176\1\u01be\1\176"+
    "\1\u01be\3\176\1\u01be\11\176\1\u01be\13\176\1\0\1\u01bf"+
    "\1\u013d\1\u013e\1\u013d\1\0\1\u013d\1\u01bf\1\u013d\1\0"+
    "\1\u013d\1\u0141\11\u013d\1\0\11\u013d\1\u01bf\1\u013d\1\u01bf"+
    "\1\u013d\1\u01bf\3\u013d\1\u01bf\11\u013d\1\u01bf\13\u013d\1\0"+
    "\1\u01c0\1\u013f\1\u016f\1\u013f\1\u016c\1\u013f\1\u01c0\27\u013f"+
    "\1\u01c0\1\u013f\1\u01c0\1\u013f\1\u01c0\3\u013f\1\u01c0\11\u013f"+
    "\1\u01c0\13\u013f\1\0\2\u013f\1\u016f\2\u016c\1\u0198\3\u013f"+
    "\1\u0198\1\u01c1\3\u013f\2\u016c\54\u013f\1\0\2\u013f\1\u016f"+
    "\1\0\1\u016c\12\u013f\1\0\54\u013f\1\0\1\u01c2\1\u0140"+
    "\1\u0170\3\u0140\1\u01c2\1\u0140\1\u016c\25\u0140\1\u01c2\1\u0140"+
    "\1\u01c2\1\u0140\1\u01c2\3\u0140\1\u01c2\11\u0140\1\u01c2\13\u0140"+
    "\1\0\2\u0140\1\u0170\1\u016c\1\u0140\1\u019b\2\u0140\1\u016c"+
    "\1\u019b\1\u01c3\3\u0140\2\u016c\54\u0140\1\0\2\u0140\1\u0170"+
    "\1\0\4\u0140\1\u016c\6\u0140\1\0\54\u0140\1\0\2\52"+
    "\1\201\1\52\1\0\3\52\1\0\1\52\4\0\2\52"+
    "\1\0\3\52\1\0\1\52\10\0\6\52\1\0\12\52"+
    "\1\0\4\52\1\0\1\52\7\0\2\56\1\203\1\56"+
    "\1\0\3\56\1\0\1\56\4\0\2\56\1\0\3\56"+
    "\1\0\1\56\10\0\6\56\1\0\12\56\1\0\4\56"+
    "\1\0\1\56\7\0\2\63\1\205\1\63\1\0\3\63"+
    "\1\0\1\63\4\0\2\63\1\0\3\63\1\0\1\63"+
    "\10\0\6\63\1\0\12\63\1\0\4\63\1\0\1\63"+
    "\7\0\2\73\1\211\1\73\1\0\3\73\1\0\1\73"+
    "\4\0\2\73\1\0\3\73\1\0\1\73\10\0\6\73"+
    "\1\0\12\73\1\0\4\73\1\0\1\73\7\0\2\101"+
    "\1\213\1\101\1\0\3\101\1\0\1\101\4\0\2\101"+
    "\1\0\3\101\1\0\1\101\10\0\6\101\1\0\12\101"+
    "\1\0\4\101\1\0\1\101\7\0\1\u01c4\1\215\1\216"+
    "\1\215\1\217\1\215\1\u01c4\27\215\1\u01c4\1\215\1\u01c4"+
    "\1\215\1\u01c4\3\215\1\u01c4\11\215\1\u01c4\13\215\1\0"+
    "\1\u01c5\1\220\1\221\3\220\1\u01c5\1\220\1\217\25\220"+
    "\1\u01c5\1\220\1\u01c5\1\220\1\u01c5\3\220\1\u01c5\11\220"+
    "\1\u01c5\13\220\1\0\2\106\1\222\1\106\1\0\3\106"+
    "\1\0\1\106\4\0\2\106\1\0\3\106\1\0\1\106"+
    "\10\0\6\106\1\0\12\106\1\0\4\106\1\0\1\106"+
    "\7\0\1\u01c6\1\224\1\225\1\224\1\0\1\224\1\u01c6"+
    "\1\224\1\0\1\224\4\0\2\224\1\0\3\224\1\0"+
    "\1\224\10\0\1\u01c6\1\224\1\u01c6\1\224\1\u01c6\1\224"+
    "\1\0\1\224\1\u01c6\10\224\1\0\1\u01c6\3\224\1\0"+
    "\1\224\7\0\1\u01c7\1\341\1\342\1\341\1\0\1\341"+
    "\1\u01c7\1\341\1\0\1\341\1\0\1\232\2\0\2\341"+
    "\1\0\3\341\1\0\1\341\10\0\1\u01c7\1\341\1\u01c7"+
    "\1\341\1\u01c7\1\341\1\0\1\341\1\u01c7\10\341\1\0"+
    "\1\u01c7\3\341\1\0\1\341\7\0\2\114\1\231\1\114"+
    "\1\0\3\114\1\0\1\114\1\0\1\232\2\0\2\114"+
    "\1\0\3\114\1\233\1\114\10\0\6\114\1\0\12\114"+
    "\1\0\4\114\1\0\1\114\7\0\1\u01c8\1\235\1\236"+
    "\1\235\1\237\1\235\1\u01c8\27\235\1\u01c8\1\235\1\u01c8"+
    "\1\235\1\u01c8\3\235\1\u01c8\11\235\1\u01c8\13\235\1\0"+
    "\1\u01c9\1\240\1\241\3\240\1\u01c9\1\240\1\237\25\240"+
    "\1\u01c9\1\240\1\u01c9\1\240\1\u01c9\3\240\1\u01c9\11\240"+
    "\1\u01c9\13\240\1\0\1\u01ca\1\243\1\244\1\243\1\0"+
    "\1\243\1\u01ca\1\243\1\0\1\243\4\0\2\243\1\0"+
    "\3\243\1\0\1\243\10\0\1\u01ca\1\243\1\u01ca\1\243"+
    "\1\u01ca\1\243\1\0\1\243\1\u01ca\10\243\1\0\1\u01ca"+
    "\3\243\1\0\1\243\7\0\1\u01cb\5\0\1\u01cb\1\u0120"+
    "\15\0\2\u01cb\7\0\6\u01cb\2\0\2\u01cb\10\0\2\u01cb"+
    "\13\0\1\u01cc\5\0\1\u01cc\16\0\2\u01cc\7\0\6\u01cc"+
    "\2\0\2\u01cc\10\0\2\u01cc\13\0\1\u01cd\1\u0152\1\u0153"+
    "\1\u0152\1\0\1\u0152\1\u01cd\1\u0152\1\0\1\u0152\1\u0157"+
    "\11\u0152\1\0\11\u0152\1\u01cd\1\u0152\1\u01cd\1\u0152\1\u01cd"+
    "\3\u0152\1\u01cd\11\u0152\1\u01cd\13\u0152\1\0\1\u01ce\1\u0155"+
    "\1\u0184\1\u0155\1\u0181\1\u0155\1\u01ce\27\u0155\1\u01ce\1\u0155"+
    "\1\u01ce\1\u0155\1\u01ce\3\u0155\1\u01ce\11\u0155\1\u01ce\13\u0155"+
    "\1\0\2\u0155\1\u0184\2\u0181\1\u01af\3\u0155\1\u01af\1\u01cf"+
    "\3\u0155\2\u0181\54\u0155\1\0\2\u0155\1\u0184\1\0\1\u0181"+
    "\12\u0155\1\0\54\u0155\1\0\1\u01d0\1\u0156\1\u0185\3\u0156"+
    "\1\u01d0\1\u0156\1\u0181\25\u0156\1\u01d0\1\u0156\1\u01d0\1\u0156"+
    "\1\u01d0\3\u0156\1\u01d0\11\u0156\1\u01d0\13\u0156\1\0\2\u0156"+
    "\1\u0185\1\u0181\1\u0156\1\u01b2\2\u0156\1\u0181\1\u01b2\1\u01d1"+
    "\3\u0156\2\u0181\54\u0156\1\0\2\u0156\1\u0185\1\0\4\u0156"+
    "\1\u0181\6\u0156\1\0\54\u0156\47\0\2\u01d2\25\0\2\143"+
    "\1\144\1\143\1\0\3\143\1\0\1\143\4\0\2\143"+
    "\1\0\3\143\1\0\1\143\10\0\6\143\1\0\12\143"+
    "\1\0\4\143\1\0\1\143\7\0\2\145\1\146\1\145"+
    "\1\0\3\145\1\0\1\145\4\0\2\145\1\0\3\145"+
    "\1\0\1\145\10\0\6\145\1\0\12\145\1\0\4\145"+
    "\1\0\1\145\67\0\2\u01d3\13\0\1\u01d4\1\u0108\1\u0109"+
    "\1\u0108\1\0\1\u0108\1\u01d4\1\u0108\1\0\1\u0108\1\u0136"+
    "\3\0\2\u0108\1\0\3\u0108\1\0\1\u0108\10\0\1\u01d4"+
    "\1\u0108\1\u01d4\1\u0108\1\u01d4\1\u0108\1\0\1\u0108\1\u01d4"+
    "\10\u0108\1\0\1\u01d4\3\u0108\1\0\1\u0108\7\0\2\163"+
    "\1\164\1\163\1\0\3\163\1\0\1\163\4\0\2\163"+
    "\1\0\3\163\1\305\1\163\10\0\6\163\1\0\12\163"+
    "\1\0\4\163\1\0\1\163\7\0\2\166\1\167\1\166"+
    "\1\170\67\166\1\0\2\171\1\172\5\171\1\170\63\171"+
    "\1\0\2\173\1\174\1\173\1\175\67\173\1\0\2\176"+
    "\1\177\5\176\1\175\63\176\1\0\1\u01d5\1\u013d\1\u013e"+
    "\1\u013d\1\0\1\u013d\1\u01d5\1\u013d\1\0\1\u013d\1\u0141"+
    "\11\u013d\1\0\11\u013d\1\u01d5\1\u013d\1\u01d5\1\u013d\1\u01d5"+
    "\3\u013d\1\u01d5\11\u013d\1\u01d5\13\u013d\1\0\1\u01d6\1\u013f"+
    "\1\u016f\1\u013f\1\u016c\1\u013f\1\u01d6\27\u013f\1\u01d6\1\u013f"+
    "\1\u01d6\1\u013f\1\u01d6\3\u013f\1\u01d6\11\u013f\1\u01d6\13\u013f"+
    "\1\0\1\u01d7\1\u0140\1\u0170\3\u0140\1\u01d7\1\u0140\1\u016c"+
    "\25\u0140\1\u01d7\1\u0140\1\u01d7\1\u0140\1\u01d7\3\u0140\1\u01d7"+
    "\11\u0140\1\u01d7\13\u0140\1\0\2\215\1\216\1\215\1\217"+
    "\67\215\1\0\2\220\1\221\5\220\1\217\63\220\1\0"+
    "\2\224\1\225\1\224\1\0\3\224\1\0\1\224\4\0"+
    "\2\224\1\0\3\224\1\0\1\224\10\0\6\224\1\0"+
    "\12\224\1\0\4\224\1\0\1\224\7\0\1\u01d8\1\341"+
    "\1\342\1\341\1\0\1\341\1\u01d8\1\341\1\0\1\341"+
    "\1\0\1\232\2\0\2\341\1\0\3\341\1\0\1\341"+
    "\10\0\1\u01d8\1\341\1\u01d8\1\341\1\u01d8\1\341\1\0"+
    "\1\341\1\u01d8\10\341\1\0\1\u01d8\3\341\1\0\1\341"+
    "\7\0\2\235\1\236\1\235\1\237\67\235\1\0\2\240"+
    "\1\241\5\240\1\237\63\240\1\0\2\243\1\244\1\243"+
    "\1\0\3\243\1\0\1\243\4\0\2\243\1\0\3\243"+
    "\1\0\1\243\10\0\6\243\1\0\12\243\1\0\4\243"+
    "\1\0\1\243\16\0\1\u0120\65\0\1\u01d9\5\0\1\u01d9"+
    "\16\0\2\u01d9\7\0\6\u01d9\2\0\2\u01d9\10\0\2\u01d9"+
    "\13\0\1\u01da\1\u0152\1\u0153\1\u0152\1\0\1\u0152\1\u01da"+
    "\1\u0152\1\0\1\u0152\1\u0157\11\u0152\1\0\11\u0152\1\u01da"+
    "\1\u0152\1\u01da\1\u0152\1\u01da\3\u0152\1\u01da\11\u0152\1\u01da"+
    "\13\u0152\1\0\1\u01db\1\u0155\1\u0184\1\u0155\1\u0181\1\u0155"+
    "\1\u01db\27\u0155\1\u01db\1\u0155\1\u01db\1\u0155\1\u01db\3\u0155"+
    "\1\u01db\11\u0155\1\u01db\13\u0155\1\0\1\u01dc\1\u0156\1\u0185"+
    "\3\u0156\1\u01dc\1\u0156\1\u0181\25\u0156\1\u01dc\1\u0156\1\u01dc"+
    "\1\u0156\1\u01dc\3\u0156\1\u01dc\11\u0156\1\u01dc\13\u0156\53\0"+
    "\1\u01dd\62\0\2\u01de\33\0\1\u01df\1\u0108\1\u0109\1\u0108"+
    "\1\0\1\u0108\1\u01df\1\u0108\1\0\1\u0108\1\u0136\3\0"+
    "\2\u0108\1\0\3\u0108\1\0\1\u0108\10\0\1\u01df\1\u0108"+
    "\1\u01df\1\u0108\1\u01df\1\u0108\1\0\1\u0108\1\u01df\10\u0108"+
    "\1\0\1\u01df\3\u0108\1\0\1\u0108\7\0\1\u01e0\1\u013d"+
    "\1\u013e\1\u013d\1\0\1\u013d\1\u01e0\1\u013d\1\0\1\u013d"+
    "\1\u0141\11\u013d\1\0\11\u013d\1\u01e0\1\u013d\1\u01e0\1\u013d"+
    "\1\u01e0\3\u013d\1\u01e0\11\u013d\1\u01e0\13\u013d\1\0\1\u01e1"+
    "\1\u013f\1\u016f\1\u013f\1\u016c\1\u013f\1\u01e1\27\u013f\1\u01e1"+
    "\1\u013f\1\u01e1\1\u013f\1\u01e1\3\u013f\1\u01e1\11\u013f\1\u01e1"+
    "\13\u013f\1\0\1\u01e2\1\u0140\1\u0170\3\u0140\1\u01e2\1\u0140"+
    "\1\u016c\25\u0140\1\u01e2\1\u0140\1\u01e2\1\u0140\1\u01e2\3\u0140"+
    "\1\u01e2\11\u0140\1\u01e2\13\u0140\1\0\2\341\1\342\1\341"+
    "\1\0\3\341\1\0\1\341\1\0\1\232\2\0\2\341"+
    "\1\0\3\341\1\0\1\341\10\0\6\341\1\0\12\341"+
    "\1\0\4\341\1\0\1\341\7\0\1\u01e3\5\0\1\u01e3"+
    "\16\0\2\u01e3\7\0\6\u01e3\2\0\2\u01e3\10\0\2\u01e3"+
    "\13\0\1\u01e4\1\u0152\1\u0153\1\u0152\1\0\1\u0152\1\u01e4"+
    "\1\u0152\1\0\1\u0152\1\u0157\11\u0152\1\0\11\u0152\1\u01e4"+
    "\1\u0152\1\u01e4\1\u0152\1\u01e4\3\u0152\1\u01e4\11\u0152\1\u01e4"+
    "\13\u0152\1\0\1\u01e5\1\u0155\1\u0184\1\u0155\1\u0181\1\u0155"+
    "\1\u01e5\27\u0155\1\u01e5\1\u0155\1\u01e5\1\u0155\1\u01e5\3\u0155"+
    "\1\u01e5\11\u0155\1\u01e5\13\u0155\1\0\1\u01e6\1\u0156\1\u0185"+
    "\3\u0156\1\u01e6\1\u0156\1\u0181\25\u0156\1\u01e6\1\u0156\1\u01e6"+
    "\1\u0156\1\u01e6\3\u0156\1\u01e6\11\u0156\1\u01e6\13\u0156\52\0"+
    "\1\u01e7\23\0\2\u0108\1\u0109\1\u0108\1\0\3\u0108\1\0"+
    "\1\u0108\1\u0136\3\0\2\u0108\1\0\3\u0108\1\0\1\u0108"+
    "\10\0\6\u0108\1\0\12\u0108\1\0\4\u0108\1\0\1\u0108"+
    "\7\0\1\u01e8\1\u013d\1\u013e\1\u013d\1\0\1\u013d\1\u01e8"+
    "\1\u013d\1\0\1\u013d\1\u0141\11\u013d\1\0\11\u013d\1\u01e8"+
    "\1\u013d\1\u01e8\1\u013d\1\u01e8\3\u013d\1\u01e8\11\u013d\1\u01e8"+
    "\13\u013d\1\0\1\u01e9\1\u013f\1\u016f\1\u013f\1\u016c\1\u013f"+
    "\1\u01e9\27\u013f\1\u01e9\1\u013f\1\u01e9\1\u013f\1\u01e9\3\u013f"+
    "\1\u01e9\11\u013f\1\u01e9\13\u013f\1\0\1\u01ea\1\u0140\1\u0170"+
    "\3\u0140\1\u01ea\1\u0140\1\u016c\25\u0140\1\u01ea\1\u0140\1\u01ea"+
    "\1\u0140\1\u01ea\3\u0140\1\u01ea\11\u0140\1\u01ea\13\u0140\1\0"+
    "\1\u01eb\1\u0152\1\u0153\1\u0152\1\0\1\u0152\1\u01eb\1\u0152"+
    "\1\0\1\u0152\1\u0157\11\u0152\1\0\11\u0152\1\u01eb\1\u0152"+
    "\1\u01eb\1\u0152\1\u01eb\3\u0152\1\u01eb\11\u0152\1\u01eb\13\u0152"+
    "\1\0\1\u01ec\1\u0155\1\u0184\1\u0155\1\u0181\1\u0155\1\u01ec"+
    "\27\u0155\1\u01ec\1\u0155\1\u01ec\1\u0155\1\u01ec\3\u0155\1\u01ec"+
    "\11\u0155\1\u01ec\13\u0155\1\0\1\u01ed\1\u0156\1\u0185\3\u0156"+
    "\1\u01ed\1\u0156\1\u0181\25\u0156\1\u01ed\1\u0156\1\u01ed\1\u0156"+
    "\1\u01ed\3\u0156\1\u01ed\11\u0156\1\u01ed\13\u0156\1\0\2\u013d"+
    "\1\u013e\1\u013d\1\0\3\u013d\1\0\1\u013d\1\u0141\11\u013d"+
    "\1\0\47\u013d\1\0\1\u01ee\1\u013f\1\u016f\1\u013f\1\u016c"+
    "\1\u013f\1\u01ee\27\u013f\1\u01ee\1\u013f\1\u01ee\1\u013f\1\u01ee"+
    "\3\u013f\1\u01ee\11\u013f\1\u01ee\13\u013f\1\0\1\u01ef\1\u0140"+
    "\1\u0170\3\u0140\1\u01ef\1\u0140\1\u016c\25\u0140\1\u01ef\1\u0140"+
    "\1\u01ef\1\u0140\1\u01ef\3\u0140\1\u01ef\11\u0140\1\u01ef\13\u0140"+
    "\1\0\2\u0152\1\u0153\1\u0152\1\0\3\u0152\1\0\1\u0152"+
    "\1\u0157\11\u0152\1\0\47\u0152\1\0\1\u01f0\1\u0155\1\u0184"+
    "\1\u0155\1\u0181\1\u0155\1\u01f0\27\u0155\1\u01f0\1\u0155\1\u01f0"+
    "\1\u0155\1\u01f0\3\u0155\1\u01f0\11\u0155\1\u01f0\13\u0155\1\0"+
    "\1\u01f1\1\u0156\1\u0185\3\u0156\1\u01f1\1\u0156\1\u0181\25\u0156"+
    "\1\u01f1\1\u0156\1\u01f1\1\u0156\1\u01f1\3\u0156\1\u01f1\11\u0156"+
    "\1\u01f1\13\u0156\1\0\2\u013f\1\u016f\1\u013f\1\u016c\67\u013f"+
    "\1\0\2\u0140\1\u0170\5\u0140\1\u016c\63\u0140\1\0\2\u0155"+
    "\1\u0184\1\u0155\1\u0181\67\u0155\1\0\2\u0156\1\u0185\5\u0156"+
    "\1\u0181\63\u0156";

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;

  private static final int ZZ_NO_MATCH = 1;

  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\23\0\1\1\1\11\7\1\1\11\1\1\1\11\2\1"+
    "\1\11\3\1\1\11\6\1\1\11\3\1\2\11\3\1"+
    "\1\11\2\1\2\11\3\1\1\11\1\1\1\11\10\1"+
    "\2\11\6\1\1\11\6\1\1\11\7\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\15\0\1\1\4\0\1\11"+
    "\4\0\1\11\4\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\11\1\0\1\1\1\0\1\1\2\0\1\11"+
    "\3\0\2\1\3\0\1\11\1\0\1\1\1\11\1\1"+
    "\2\0\1\11\2\0\2\1\2\0\1\1\2\0\1\11"+
    "\11\1\1\11\2\1\11\0\1\11\6\0\1\1\1\0"+
    "\1\1\2\0\1\1\2\0\1\1\2\0\1\1\2\0"+
    "\5\1\1\0\1\1\2\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\1\1\0\3\1\1\0"+
    "\15\1\2\11\16\0\1\1\5\0\5\1\2\0\4\1"+
    "\2\0\2\1\1\0\1\1\1\0\11\1\1\11\5\0"+
    "\1\11\3\0\1\11\1\0\1\1\10\0\1\11\5\1"+
    "\2\0\4\1\2\0\3\1\5\0\1\11\1\0\6\1"+
    "\6\0\1\11\1\0\1\1\6\0\1\1\2\0\5\1"+
    "\2\0\4\1\2\0\3\1\2\0\1\1\3\0\5\1"+
    "\1\0\2\11\2\0\1\1\13\0\5\1\2\0\4\1"+
    "\2\0\3\1\10\0\2\1\1\0\1\11\1\0\1\1"+
    "\6\0\1\1\1\0\1\1\2\0\2\1\2\0\3\1"+
    "\2\0\1\1\1\0\1\1\6\0\2\1\4\0\1\11"+
    "\4\0\1\11\3\0\1\11\12\0";


  private static int [] zzUnpackAction() {
    int [] result = new int[497];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }
  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }
  private static int [] zzUnpackAttribute() {
    int [] result = new int[497];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static int [] zzUnpackRowMap() {
    int [] result = new int[497];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  private static int [] zzUnpackTrans() {
    int [] result = new int[25254];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private final static String UNDEFINED = "undefined";
  private String fBufferedContext = null;
private int fBufferedStart;
//  private int fBufferedTextLength;
  private int fBufferedLength;
  //  private StringBuffer fBufferedText = null;
  private CSSTextRegionFactory fRegionFactory = CSSTextRegionFactory.getInstance();
  private int fInitialState = YYINITIAL;
  public final static int BUFFER_SIZE_NORMAL = 16384;
  public final static int BUFFER_SIZE_SMALL = 256;

  private int fInitialBufferSize = BUFFER_SIZE_NORMAL;
  
  /* user method */
  public CssResourceAwareTokenizer() {
    super();
  }

  /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param   in  the java.io.Inputstream to read input from.
     */
    public CssResourceAwareTokenizer(java.io.InputStream in) {
      this(new java.io.InputStreamReader(in));
    }

  /**
     * Creates a new scanner
     * There is also a java.io.InputStream version of this constructor.
     *
     * @param   in  the java.io.Reader to read input from.
     */
    public CssResourceAwareTokenizer(java.io.Reader in) {
      this.zzReader = in;
    }
    
    /* user method */
    public final ITextRegion getNextToken() throws IOException {
    String context;
    String nextTokenType;
    boolean spaceFollows;
//    StringBuffer text;
    int start;
    int textLength;
    int length;
    if (fBufferedContext != null) {
      context = fBufferedContext;
//      text = fBufferedText;
      start = fBufferedStart;
      textLength = length = fBufferedLength;

      fBufferedContext = null;
    } else {
      context = primGetNextToken();
//      text = new StringBuffer(yytext());
      start = yychar;
      textLength = length = yylength();
    }

    if (context != null) {
      if (context == UNDEFINED) {
        // undef -> concatenate undef's
        nextTokenType = primGetNextToken();
        while (nextTokenType == UNDEFINED) {
//          text.append(yytext());
          textLength += yylength();
          length = textLength;
          nextTokenType = primGetNextToken();
        }
        fBufferedContext = nextTokenType;
//        fBufferedText = new StringBuffer(yytext());
        fBufferedStart = yychar;
        fBufferedLength = yylength();
      } else {
        nextTokenType = null;
        spaceFollows = false;
        if (CSSRegionUtil.isDeclarationValueType(context)) { // declaration value can contain VALUE_S
          nextTokenType = primGetNextToken();
          spaceFollows = (nextTokenType == CSS_DECLARATION_VALUE_S);
        } else if (canContainSpace(context)) {
          nextTokenType = primGetNextToken();
          spaceFollows = (nextTokenType == CSS_S);
        }
        if (nextTokenType != null) { // nextToken is retrieved
          if (spaceFollows) {
            // next is space -> append
//            text.append(yytext());
            length += yylength();
          } else {
            // next is NOT space -> push this for next time, return itself
            fBufferedContext = nextTokenType;
//            fBufferedText = new StringBuffer(yytext());
            fBufferedStart = yychar;
            fBufferedLength = yylength();
          }
        }
      }
    }

    if (context != null) {
      if (context == UNDEFINED) {
        context = CSS_UNKNOWN;
      }
      return fRegionFactory.createRegion(context, start, textLength, length);
    } else {
      return null;
    }
    }

  /* user method */
  public final int getOffset() {
    return yychar;
  }
  
  /* user method */
  public final boolean isEOF() {
    return zzAtEOF;
  }

  /* user method */
 /* for standalone use */
  public final List<CSSTextToken> parseText() throws IOException {
    List<CSSTextToken> tokens = new ArrayList<CSSTextToken>();

    CSSTextToken token;
  for (String kind = primGetNextToken(); kind != null; kind = primGetNextToken()) {
    token = new CSSTextToken();
    token.kind = kind;          
    token.start = yychar;
    token.length = yylength();
    token.image = yytext();
    tokens.add(token);
  }

    return tokens;
  }

  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String primGetNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 33: 
          { yybegin(ST_IMPORT_MEDIUM); return CSS_STRING;
          }
        case 55: break;
        case 35: 
          { yybegin(ST_DECLARATION_VALUE); return CSS_DECLARATION_VALUE_DIMENSION;
          }
        case 56: break;
        case 40: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return CSS_DECLARATION_VALUE_S;
          }
        case 57: break;
        case 37: 
          { yybegin(ST_DECLARATION_VALUE); return CSS_DECLARATION_VALUE_FUNCTION;
          }
        case 58: break;
        case 21: 
          { yybegin(ST_SELECTOR_MODIFIER); return CSS_SELECTOR_ATTRIBUTE_END;
          }
        case 59: break;
        case 2: 
          { return UNDEFINED;
          }
        case 60: break;
        case 10: 
          { yybegin(ST_IMPORT_DELIMITER); return CSS_MEDIUM;
          }
        case 61: break;
        case 38: 
          { yybegin(ST_DECLARATION_VALUE); return CSS_DECLARATION_VALUE_STRING;
          }
        case 62: break;
        case 30: 
          { yybegin(ST_SELECTOR_MODIFIER); return CSS_SELECTOR_CLASS;
          }
        case 63: break;
        case 13: 
          { yybegin(YYINITIAL); return CSS_LBRACE;
          }
        case 64: break;
        case 5: 
          { yybegin(YYINITIAL); return CSS_RBRACE;
          }
        case 65: break;
        case 12: 
          { yybegin(ST_MEDIA_DELIMITER); return CSS_MEDIUM;
          }
        case 66: break;
        case 11: 
          { yybegin(ST_IMPORT_MEDIUM); return CSS_MEDIA_SEPARATOR;
          }
        case 67: break;
        case 25: 
          { yybegin(ST_DECLARATION_PRE_VALUE); return CSS_DECLARATION_SEPARATOR;
          }
        case 68: break;
        case 53: 
          { yybegin(ST_FONT_FACE_DELIMITER); return CSS_FONT_FACE;
          }
        case 69: break;
        case 52: 
          { yybegin(ST_CHARSET_NAME); return CSS_CHARSET;
          }
        case 70: break;
        case 48: 
          { yybegin(ST_IMPORT_MEDIUM); return CSS_URI;
          }
        case 71: break;
        case 20: 
          { yybegin(ST_SELECTOR_ATTRIBUTE_VALUE); return CSS_SELECTOR_ATTRIBUTE_OPERATOR;
          }
        case 72: break;
        case 41: 
          { return CSS_CDC;
          }
        case 73: break;
        case 16: 
          { yybegin(ST_DECLARATION); return CSS_LBRACE;
          }
        case 74: break;
        case 6: 
          { yybegin(ST_SELECTOR_MODIFIER); return CSS_SELECTOR_UNIVERSAL;
          }
        case 75: break;
        case 8: 
          { yybegin(ST_SELECTOR_ATTRIBUTE_NAME); return CSS_SELECTOR_ATTRIBUTE_START;
          }
        case 76: break;
        case 44: 
          { return CSS_CDO;
          }
        case 77: break;
        case 9: 
          { yybegin(YYINITIAL); return CSS_DELIMITER;
          }
        case 78: break;
        case 19: 
          { yybegin(ST_SELECTOR_ATTRIBUTE_OPERATOR); return CSS_SELECTOR_ATTRIBUTE_NAME;
          }
        case 79: break;
        case 39: 
          { yybegin(ST_DECLARATION_VALUE); return CSS_DECLARATION_VALUE_HASH;
          }
        case 80: break;
        case 47: 
          { yybegin(ST_PAGE_PSEUDO_PAGE); return CSS_PAGE;
          }
        case 81: break;
        case 3: 
          { yybegin(ST_SELECTOR_MODIFIER); return CSS_SELECTOR_ELEMENT_NAME;
          }
        case 82: break;
        case 32: 
          { yybegin(ST_CHARSET_DELIMITER); return CSS_STRING;
          }
        case 83: break;
        case 26: 
          { yybegin(ST_DECLARATION_VALUE); return CSS_DECLARATION_VALUE_NUMBER;
          }
        case 84: break;
        case 17: 
          { yybegin(ST_SELECTOR); return CSS_SELECTOR_COMBINATOR;
          }
        case 85: break;
        case 34: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(ST_SELECTOR); return CSS_SELECTOR_COMBINATOR;
          }
        case 86: break;
        case 43: 
          { yybegin(ST_DECLARATION_VALUE); return CSS_DECLARATION_VALUE_UNICODE_RANGE;
          }
        case 87: break;
        case 46: 
          { return CSS_ATKEYWORD;
          }
        case 88: break;
        case 36: 
          { yybegin(ST_DECLARATION_VALUE); return CSS_DECLARATION_VALUE_PERCENTAGE;
          }
        case 89: break;
        case 14: 
          { yybegin(ST_MEDIA_MEDIUM); return CSS_MEDIA_SEPARATOR;
          }
        case 90: break;
        case 27: 
          { yybegin(ST_DECLARATION_VALUE); return CSS_DECLARATION_VALUE_IDENT;
          }
        case 91: break;
        case 15: 
          { yybegin(ST_PAGE_DELIMITER); return CSS_PAGE_SELECTOR;
          }
        case 92: break;
        case 29: 
          { yybegin(ST_DECLARATION_VALUE); return CSS_DECLARATION_VALUE_OPERATOR;
          }
        case 93: break;
        case 45: 
          { return CSS_COMMENT;
          }
        case 94: break;
        case 54: 
          { yybegin(ST_DECLARATION_VALUE); return CSS_DECLARATION_VALUE_IMPORTANT;
          }
        case 95: break;
        case 22: 
          { yybegin(ST_SELECTOR_ATTRIBUTE_END); return CSS_SELECTOR_ATTRIBUTE_VALUE;
          }
        case 96: break;
        case 18: 
          { yybegin(ST_SELECTOR); return CSS_SELECTOR_SEPARATOR;
          }
        case 97: break;
        case 4: 
          { return CSS_S;
          }
        case 98: break;
        case 42: 
          { yybegin(ST_CSSRESOURCE_RULE_MEDIUM); return CSS_MEDIA;
          }
        case 99: break;
        case 31: 
          { yybegin(ST_SELECTOR_MODIFIER); return CSS_SELECTOR_ID;
          }
        case 100: break;
        case 51: 
          { yybegin(ST_IMPORT_URI); return CSS_IMPORT;
          }
        case 101: break;
        case 28: 
          { yybegin(ST_DECLARATION_VALUE); return CSS_DECLARATION_VALUE_PARENTHESIS_CLOSE;
          }
        case 102: break;
        case 50: 
          { yybegin(ST_MEDIA_MEDIUM); return CSS_MEDIA;
          }
        case 103: break;
        case 24: 
          { yybegin(ST_DECLARATION); return CSS_DECLARATION_DELIMITER;
          }
        case 104: break;
        case 23: 
          { yybegin(ST_DECLARATION_SEPARATOR); return CSS_DECLARATION_PROPERTY;
          }
        case 105: break;
        case 7: 
          { yybegin(ST_SELECTOR_MODIFIER); return CSS_SELECTOR_PSEUDO;
          }
        case 106: break;
        case 1: 
          { return CSS_MEDIUM;
          }
        case 107: break;
        case 49: 
          { yybegin(ST_DECLARATION_VALUE); return CSS_DECLARATION_VALUE_URI;
          }
        case 108: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /* user method */
  public void reset(char[] charArray) {
    reset(new CharArrayReader(charArray), 0);
  }

  /* user method */
  public final void reset(java.io.Reader in, int newOffset) {
    /** the input device */
    zzReader = in;

    /** the current state of the DFA */
    zzState = 0;

    /** the current lexical state */
    zzLexicalState = fInitialState; //YYINITIAL;

    /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
    if (zzBuffer.length != fInitialBufferSize) {
      zzBuffer = new char[fInitialBufferSize];
    }
    java.util.Arrays.fill(zzBuffer, (char)0);

    /** the textposition at the last accepting state */
    zzMarkedPos = 0;

    /** the textposition at the last state to be included in yytext */
//    yy_pushbackPos = 0;

    /** the current text position in the buffer */
    zzCurrentPos = 0;

    /** startRead marks the beginning of the yytext() string in the buffer */
    zzStartRead = 0;

    /** endRead marks the last character in the buffer, that has been read
      from input */
    zzEndRead = 0;

    /** number of newlines encountered up to the start of the matched text */
    yyline = 0;

    /** the number of characters up to the start of the matched text */
    yychar = 0;

    /**
     * the number of characters from the last newline up to the start of the 
     * matched text
     */
//    yycolumn = 0; 

    /** 
     * yy_atBOL == true <=> the scanner is currently at the beginning of a line
     */
//    yy_atBOL = false;
    
    /** zzAtEOF == true <=> the scanner has returned a value for EOF */
    zzAtEOF = false;

    /* user variables */
    //    fUndefined.delete(0, fUndefined.length());
  }


  public void setInitialBufferSize(int size) {
    fInitialBufferSize = size;
  }

  public void setInitialState(int state) {
    fInitialState = state;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Added to workaround stricter compilation options without creating
   * an alternate skeleton file
   */
  void _usePrivates() {
    System.out.print(yycolumn);
    System.out.print(yyline);
    System.out.print(Boolean.toString(zzAtBOL));
  }


  /* user method */
  private boolean canContainSpace(String type) {
    if (type == CSS_DELIMITER || type == CSS_RBRACE || type == CSS_DECLARATION_DELIMITER) {
      return false;
    } else {
      return true;
    }
  } 


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


}
